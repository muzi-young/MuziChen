<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue面试题</title>
    <link href="/2021/09/05/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/09/05/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>探究时间对象的相关问题</title>
    <link href="/2021/09/04/%E6%8E%A2%E7%A9%B6%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2021/09/04/%E6%8E%A2%E7%A9%B6%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="时间对象Date"><a href="#时间对象Date" class="headerlink" title="时间对象Date()"></a>时间对象Date()</h2><blockquote><p>创建一个新的<code>Date</code>对象的唯一方法就是通过<code>new</code>操作符。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">let <span class="hljs-keyword">new</span><span class="hljs-type">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Date</span>();<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果只是作为常规函数调用，而不加new操作符，返回的只是字符串，不是一个时间对象了。</p></blockquote><h3 id="Date-构造函数有四种形式："><a href="#Date-构造函数有四种形式：" class="headerlink" title="Date()构造函数有四种形式："></a><code>Date()</code>构造函数有四种形式：</h3><blockquote><p>1.没有参数 <code>new Date()</code></p><p>如果没有提供参数，那么新创建的时间代表当前的时间。</p><p>2.Unix时间戳 <code>new Date(value)</code></p><p>value是int类型的，表示自1970年1月1日00:00:00 UTC以来的毫秒数。</p><p>3.时间戳字符串 <code>new Date(dateString)</code></p><p>表示日期的字符串值。</p></blockquote><h3 id="Date-的方法"><a href="#Date-的方法" class="headerlink" title="Date()的方法"></a><code>Date()</code>的方法</h3><h4 id="Date-prototype-getDate"><a href="#Date-prototype-getDate" class="headerlink" title="Date.prototype.getDate()"></a><em><code>Date.prototype.getDate()</code></em></h4><blockquote><p>*<code>getDate()</code>*返回一个指定的日期对象为一个月中的具体哪一天</p></blockquote><h4 id="Date-prototype-getDay"><a href="#Date-prototype-getDay" class="headerlink" title="Date.prototype.getDay()"></a><code>Date.prototype.getDay()</code></h4><blockquote><p>**<code>getDay()</code>**返回一个具体日期中一周的第几天，0 表示星期天。对于某个月中的第几天</p></blockquote><h4 id="Date-prototype-getFullYear"><a href="#Date-prototype-getFullYear" class="headerlink" title="Date.prototype.getFullYear()"></a><em><code>Date.prototype.getFullYear()</code></em></h4><blockquote><p><strong><code>getFullYear()</code></strong> 方法根据本地时间返回指定日期的年份。</p></blockquote><h4 id="Date-prototype-getMonth"><a href="#Date-prototype-getMonth" class="headerlink" title="Date.prototype.getMonth()"></a><em><code>Date.prototype.getMonth()</code></em></h4><blockquote><p>返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）,所以需要月份+1</p></blockquote><h4 id="Date-prototype-getHours"><a href="#Date-prototype-getHours" class="headerlink" title="Date.prototype.getHours()"></a><em><code>Date.prototype.getHours()</code></em></h4><blockquote><p><strong><code>getHours()</code></strong> 返回一个指定的日期对象的小时。</p></blockquote><h4 id="Date-prototype-getMinutes"><a href="#Date-prototype-getMinutes" class="headerlink" title="Date.prototype.getMinutes()"></a><em><code>Date.prototype.getMinutes()</code></em></h4><blockquote><p>**<code>getMinutes()</code>**返回一个指定的日期对象的分钟数。</p></blockquote><h4 id="Date-prototype-getSeconds"><a href="#Date-prototype-getSeconds" class="headerlink" title="Date.prototype.getSeconds()"></a><em><code>Date.prototype.getSeconds()</code></em></h4><blockquote><p><strong><code>getSeconds()</code></strong> 返回一个指定的日期对象的秒数。</p></blockquote><h4 id="Date-prototype-getTime"><a href="#Date-prototype-getTime" class="headerlink" title="Date.prototype.getTime()"></a><em><code>Date.prototype.getTime()</code></em></h4><blockquote><p><code>**getTime()**</code> 将时间转成时间戳</p></blockquote><h3 id="时间戳和时间格式的互转"><a href="#时间戳和时间格式的互转" class="headerlink" title="时间戳和时间格式的互转"></a>时间戳和时间格式的互转</h3><p>1.时间戳转成时间格式【以’-‘分割的字符串】</p><ul><li>只取year-Month-Day</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timestampToTime</span>(<span class="hljs-params">timestamp,current</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(current)&#123;<br>        <span class="hljs-comment">//时间戳为10位需*1000，时间戳为13位的话不需乘1000</span><br>         <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(timestamp); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(timestamp * <span class="hljs-number">1000</span>); <br>    &#125;<br>    <span class="hljs-keyword">var</span> Y = date.getFullYear() + <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">var</span> M = (date.getMonth() + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + (date.getMonth() + <span class="hljs-number">1</span>) : date.getMonth() + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">var</span> D = change(date.getDate()) + <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> Y + M + D;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>包括hour-minute-second</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatDateTime</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time);<br>    <span class="hljs-keyword">var</span> y = date.getFullYear();<br>    <span class="hljs-keyword">var</span> m = date.getMonth() + <span class="hljs-number">1</span>;<br>    m = m &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + m) : m;<br>    <span class="hljs-keyword">var</span> d = date.getDate();<br>    d = d &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + d) : d;<br>    <span class="hljs-keyword">var</span> h = date.getHours();<br>    h = h &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + h) : h;<br>    <span class="hljs-keyword">var</span> minute = date.getMinutes();<br>    <span class="hljs-keyword">var</span> second = date.getSeconds();<br>    minute = minute &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + minute) : minute;<br>    second = second &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + second) : second;<br>    <span class="hljs-keyword">return</span> y + <span class="hljs-string">&#x27;-&#x27;</span> + m + <span class="hljs-string">&#x27;-&#x27;</span> + d+<span class="hljs-string">&#x27; &#x27;</span>+h+<span class="hljs-string">&#x27;:&#x27;</span>+minute+<span class="hljs-string">&#x27;:&#x27;</span>+second;<br>&#125;;<br><span class="hljs-comment">// 调用方法</span><br>formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())<br></code></pre></td></tr></table></figure></li></ul><p>2.时间格式转成时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">方法<span class="hljs-number">1</span>：<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>方法<span class="hljs-number">2</span>：<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf();<br>方法<span class="hljs-number">3</span>：<br><span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>第三种方法只能精确到秒，前两种方法可以精确到毫秒<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>对象</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript与Javascript有何不同？</title>
    <link href="/2021/09/03/Typescript%E4%B8%8EJavascript%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F/"/>
    <url>/2021/09/03/Typescript%E4%B8%8EJavascript%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。</p></blockquote><blockquote><p>JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集</p></blockquote><p><strong>基本类型的语法</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> &lt;变量名&gt;:&lt;数据类型&gt; = 值;<br>数据类型有：基本数据类型<span class="hljs-built_in">number</span>、<span class="hljs-built_in">string</span>、<span class="hljs-built_in">boolean</span>、<span class="hljs-literal">null</span>、<span class="hljs-literal">undefined</span>、symbol;还可以混合类型声明<br>如：<span class="hljs-keyword">let</span> &lt;变量名&gt;:&lt;数据类型<span class="hljs-number">1</span>，数据类型<span class="hljs-number">2</span>&gt; = 值<br>这里既可以满足数据类型<span class="hljs-number">1</span>或者数据类型<span class="hljs-number">2</span>任意一者即可<br></code></pre></td></tr></table></figure><p>Eggs：<code>let num:number = 1</code>  ,<code>:number</code>这里就是定义的数据类型</p><p><strong>原始数据类型</strong></p><blockquote><ul><li>字符串string</li></ul><blockquote></blockquote><ul><li>数字number</li></ul><blockquote></blockquote><ul><li>布尔值boolean</li></ul><blockquote></blockquote><ul><li>Symbol</li></ul><blockquote></blockquote><ul><li>bigint</li></ul><blockquote></blockquote><ul><li>undefined </li></ul><blockquote></blockquote><ul><li>null</li></ul><blockquote></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>Typescript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css开发中常用代码段</title>
    <link href="/2021/08/31/css%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <url>/2021/08/31/css%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="css-开发中常用代码段"><a href="#css-开发中常用代码段" class="headerlink" title="css 开发中常用代码段"></a>css 开发中常用代码段</h2><h3 id="超出显示省略号"><a href="#超出显示省略号" class="headerlink" title="超出显示省略号"></a><strong>超出显示省略号</strong></h3><h4 id="单行显示省略号"><a href="#单行显示省略号" class="headerlink" title="单行显示省略号"></a>单行显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>:hidden;<br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><span class="hljs-attribute">white-space</span>:nowrap;<br></code></pre></td></tr></table></figure><h4 id="多行显示省略号"><a href="#多行显示省略号" class="headerlink" title="多行显示省略号"></a>多行显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-overflow</span>: ellipsis; <br><span class="hljs-attribute">display</span>: -webkit-box;<br>-webkit-box-orient: vertical;<br>-webkit-line-clamp: n; // n代表行数<br><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript内置的可迭代对象</title>
    <link href="/2021/08/31/Javascript%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/08/31/Javascript%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="js内置的可迭代对象"><a href="#js内置的可迭代对象" class="headerlink" title="js内置的可迭代对象"></a>js内置的可迭代对象</h3><blockquote><p>ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）</p><p>也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)</p><p>因此 js可迭代对象有：<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Typed Array</code>、<code>函数的arguements</code>、<code>NodeList对象</code></p></blockquote><h4 id="数组Arrays"><a href="#数组Arrays" class="headerlink" title="数组Arrays"></a>数组Arrays</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-selector-attr">[Symbol.iterator]</span>)<br> <br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let x of [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>])</span></span><br>  console<span class="hljs-selector-class">.log</span>(x)<br></code></pre></td></tr></table></figure><h4 id="字符串Strings"><a href="#字符串Strings" class="headerlink" title="字符串Strings"></a>字符串Strings</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-selector-attr">[Symbol.iterator]</span>)<br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let x of <span class="hljs-string">&quot;abc&quot;</span>)</span></span><br>  console<span class="hljs-selector-class">.log</span>(x)<br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">let map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>().<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>).<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>);<br>console.<span class="hljs-built_in">log</span>(map[Symbol.iterator]);<br><span class="hljs-keyword">for</span> (let pair of map) &#123;<br>  console.<span class="hljs-built_in">log</span>(pair);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let <span class="hljs-builtin-name">set</span> = new <span class="hljs-builtin-name">Set</span>().<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">for</span> (let x of set) &#123;<br>  console.log(x);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printArgs</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> <span class="hljs-built_in">arguments</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(x);<br>  &#125;<br>&#125;<br>printArgs(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="Typed-Arrays"><a href="#Typed-Arrays" class="headerlink" title="Typed Arrays"></a>Typed Arrays</h4><h4 id="Generators，ES6新增加"><a href="#Generators，ES6新增加" class="headerlink" title="Generators，ES6新增加"></a>Generators，ES6新增加</h4>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>ES6</tag>
      
      <tag>iterator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组、对象、字符串常见方法</title>
    <link href="/2021/08/01/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <url>/2021/08/01/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组、对象、字符串常见方法"><a href="#数组、对象、字符串常见方法" class="headerlink" title="数组、对象、字符串常见方法"></a>数组、对象、字符串常见方法</h1><p>数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>删除数组的某一项或某几项: <code>array.splice(i,1)</code></p><blockquote><p>场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种：数组包对象<br>let arr = [&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&#x27;amy&#x27;</span>&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;];<br><span class="hljs-regexp">//</span>第二种：数组包空字符串<br>let newArr = [<span class="hljs-string">&#x27;amy&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>];<br><span class="hljs-regexp">//</span>封装无论是空对象还是空字符串<br><span class="hljs-keyword">function</span> DelEmptyObj(temp)&#123;<br>  temp.forEach((item,index)=&gt;&#123;<br>    <span class="hljs-regexp">//</span>知识点 下面对象中有讲解 判断是否是空对象obj<br>    <span class="hljs-keyword">if</span>(JSON.stringify(item) == <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> || item == <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>      item.splice(index,<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;)<br>  retuen temp;<br>&#125;<br><span class="hljs-regexp">//</span>调用函数<br>DelEmptyObj(arr); <span class="hljs-regexp">//</span> [&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&#x27;amy&#x27;</span>&#125;]<br>DelEmptyObj(newArr); <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;amy&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>判断是否是空对象</strong></p><blockquote><ul><li>判断json字符串是不是’{}’</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">JSON</span>.stringify(obj) == <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>verify(obj);<br></code></pre></td></tr></table></figure><ul><li><p>es6新增方法 Object.keys(obj).length 或者 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.value(obj).length<br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change1</span>(<span class="hljs-params">arg1</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(arg1)); <span class="hljs-comment">// []</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.keys(arg1).length != <span class="hljs-number">0</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change2</span>(<span class="hljs-params">arg2</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(arg2)); <span class="hljs-comment">// []</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.values(arg2).length != <span class="hljs-number">0</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>change1(obj1);<br>change2(obj2);<br>    <br></code></pre></td></tr></table></figure></li></ul><p><strong>2.判断对象中是否存在某属性</strong></p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">方法一：通过把对象通过keys<span class="hljs-literal">()</span>转化为数组.index<span class="hljs-constructor">Of(<span class="hljs-params">str</span>)</span><br><span class="hljs-keyword">let</span> obj = &#123;name:&#x27;amy&#x27;,age:<span class="hljs-number">18</span>&#125;;<br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>keys(obj).index<span class="hljs-constructor">Of(&#x27;<span class="hljs-params">amy</span>&#x27;)</span>);  <span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">方法二：<span class="hljs-keyword">in</span> <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;amy&#x27;</span> <span class="hljs-keyword">in</span> obj)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">方法三<span class="hljs-selector-pseudo">:has</span><span class="hljs-selector-tag">OwnProperty</span><br><span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(obj.hasOwnProperty(<span class="hljs-string">&#x27;amy&#x27;</span>))  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
