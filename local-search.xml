<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>css开发中常用代码段</title>
    <link href="/2021/08/31/css%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <url>/2021/08/31/css%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="css-开发中常用代码段"><a href="#css-开发中常用代码段" class="headerlink" title="css 开发中常用代码段"></a>css 开发中常用代码段</h2><h3 id="超出显示省略号"><a href="#超出显示省略号" class="headerlink" title="超出显示省略号"></a><strong>超出显示省略号</strong></h3><h4 id="单行显示省略号"><a href="#单行显示省略号" class="headerlink" title="单行显示省略号"></a>单行显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>:hidden;<br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><span class="hljs-attribute">white-space</span>:nowrap;<br></code></pre></td></tr></table></figure><h4 id="多行显示省略号"><a href="#多行显示省略号" class="headerlink" title="多行显示省略号"></a>多行显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-overflow</span>: ellipsis; <br><span class="hljs-attribute">display</span>: -webkit-box;<br>-webkit-box-orient: vertical;<br>-webkit-line-clamp: n; // n代表行数<br><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript内置的可迭代对象</title>
    <link href="/2021/08/31/Javascript%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/08/31/Javascript%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="js内置的可迭代对象"><a href="#js内置的可迭代对象" class="headerlink" title="js内置的可迭代对象"></a>js内置的可迭代对象</h3><blockquote><p>ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）</p><p>也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)</p><p>因此 js可迭代对象有：<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Typed Array</code>、<code>函数的arguements</code>、<code>NodeList对象</code></p></blockquote><h4 id="数组Arrays"><a href="#数组Arrays" class="headerlink" title="数组Arrays"></a>数组Arrays</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-selector-attr">[Symbol.iterator]</span>)<br> <br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let x of [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>])</span></span><br>  console<span class="hljs-selector-class">.log</span>(x)<br></code></pre></td></tr></table></figure><h4 id="字符串Strings"><a href="#字符串Strings" class="headerlink" title="字符串Strings"></a>字符串Strings</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-selector-attr">[Symbol.iterator]</span>)<br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let x of <span class="hljs-string">&quot;abc&quot;</span>)</span></span><br>  console<span class="hljs-selector-class">.log</span>(x)<br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">let map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>().<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>).<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>);<br>console.<span class="hljs-built_in">log</span>(map[Symbol.iterator]);<br><span class="hljs-keyword">for</span> (let pair of map) &#123;<br>  console.<span class="hljs-built_in">log</span>(pair);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let <span class="hljs-builtin-name">set</span> = new <span class="hljs-builtin-name">Set</span>().<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">for</span> (let x of set) &#123;<br>  console.log(x);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printArgs</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> <span class="hljs-built_in">arguments</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(x);<br>  &#125;<br>&#125;<br>printArgs(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="Typed-Arrays"><a href="#Typed-Arrays" class="headerlink" title="Typed Arrays"></a>Typed Arrays</h4><h4 id="Generators，ES6新增加"><a href="#Generators，ES6新增加" class="headerlink" title="Generators，ES6新增加"></a>Generators，ES6新增加</h4>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>ES6</tag>
      
      <tag>iterator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组、对象、字符串常见方法</title>
    <link href="/2021/08/01/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <url>/2021/08/01/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组、对象、字符串常见方法"><a href="#数组、对象、字符串常见方法" class="headerlink" title="数组、对象、字符串常见方法"></a>数组、对象、字符串常见方法</h1><p>数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>删除数组的某一项或某几项: <code>array.splice(i,1)</code></p><blockquote><p>场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种：数组包对象<br>let arr = [&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&#x27;amy&#x27;</span>&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;];<br><span class="hljs-regexp">//</span>第二种：数组包空字符串<br>let newArr = [<span class="hljs-string">&#x27;amy&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>];<br><span class="hljs-regexp">//</span>封装无论是空对象还是空字符串<br><span class="hljs-keyword">function</span> DelEmptyObj(temp)&#123;<br>  temp.forEach((item,index)=&gt;&#123;<br>    <span class="hljs-regexp">//</span>知识点 下面对象中有讲解 判断是否是空对象obj<br>    <span class="hljs-keyword">if</span>(JSON.stringify(item) == <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> || item == <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>      item.splice(index,<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;)<br>  retuen temp;<br>&#125;<br><span class="hljs-regexp">//</span>调用函数<br>DelEmptyObj(arr); <span class="hljs-regexp">//</span> [&#123;id:<span class="hljs-number">1</span>,name:<span class="hljs-string">&#x27;amy&#x27;</span>&#125;]<br>DelEmptyObj(newArr); <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;amy&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>判断是否是空对象</strong></p><blockquote><ul><li>判断json字符串是不是’{}’</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">JSON</span>.stringify(obj) == <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>verify(obj);<br></code></pre></td></tr></table></figure><ul><li><p>es6新增方法 Object.keys(obj).length 或者 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.value(obj).length<br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change1</span>(<span class="hljs-params">arg1</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(arg1)); <span class="hljs-comment">// []</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.keys(arg1).length != <span class="hljs-number">0</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change2</span>(<span class="hljs-params">arg2</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(arg2)); <span class="hljs-comment">// []</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.values(arg2).length != <span class="hljs-number">0</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>change1(obj1);<br>change2(obj2);<br>    <br></code></pre></td></tr></table></figure></li></ul><p><strong>2.判断对象中是否存在某属性</strong></p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">方法一：通过把对象通过keys<span class="hljs-literal">()</span>转化为数组.index<span class="hljs-constructor">Of(<span class="hljs-params">str</span>)</span><br><span class="hljs-keyword">let</span> obj = &#123;name:&#x27;amy&#x27;,age:<span class="hljs-number">18</span>&#125;;<br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>keys(obj).index<span class="hljs-constructor">Of(&#x27;<span class="hljs-params">amy</span>&#x27;)</span>);  <span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">方法二：<span class="hljs-keyword">in</span> <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;amy&#x27;</span> <span class="hljs-keyword">in</span> obj)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">方法三<span class="hljs-selector-pseudo">:has</span><span class="hljs-selector-tag">OwnProperty</span><br><span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(obj.hasOwnProperty(<span class="hljs-string">&#x27;amy&#x27;</span>))  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
