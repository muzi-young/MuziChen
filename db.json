{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/dahzi.png","path":"images/dahzi.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/mu.png","path":"images/mu.png","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"source/picture/img/yy1.jpg","path":"picture/img/yy1.jpg","modified":0,"renderable":0},{"_id":"source/picture/img/yy2.jpg","path":"picture/img/yy2.jpg","modified":0,"renderable":0},{"_id":"source/picture/img/yy3.jpg","path":"picture/img/yy3.jpg","modified":0,"renderable":0},{"_id":"source/picture/img/yy4.jpg","path":"picture/img/yy4.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"18023edff5e5397d909dc369694cb7064d6ad39c","modified":1637312537338},{"_id":"source/_posts/css开发中常用代码段.md","hash":"e90e6c0642f67ffdc0e22968b54179831b72bbcb","modified":1631614494555},{"_id":"source/_posts/vue面试题.md","hash":"6a71bc12488813900fa59b207726b0b240b37a5c","modified":1630807234996},{"_id":"source/_posts/Javascript内置的可迭代对象.md","hash":"2d77653c0fe24dda895a4c0feef1dff72e7d3934","modified":1631614494587},{"_id":"source/_posts/探究时间对象的相关问题.md","hash":"be7305c729fc8f745f86f446a1b3f2ad83d8d98f","modified":1631614494535},{"_id":"source/about/index.md","hash":"44a26c3c0688f4135d0c243cfb372a12f8fe082e","modified":1631613547378},{"_id":"source/categories/index.md","hash":"9d6140a7c001f0fa4ff7591b6756bfa681d3580e","modified":1631614318152},{"_id":"source/links/index.md","hash":"542417d1fa6b66f6818cb964a02db61ec26fe878","modified":1631613510624},{"_id":"source/picture/index.md","hash":"50e6f77f257df4978d28f956bb42a3c4a9069f44","modified":1640857908911},{"_id":"source/tags/index.md","hash":"7c1d3543047a7d29fb48f575b312485183e40f89","modified":1631613071476},{"_id":"source/_posts/Typescript与Javascript有何不同？.md","hash":"f90c2e78be169012ab790e1ac4779e5ce9af66b4","modified":1631614494571},{"_id":"source/_posts/数组、对象、字符串常见方法.md","hash":"8bb81f777c97f377bf18316722befb2c2776ec6d","modified":1631614494497},{"_id":"source/_posts/svg入门教程.md","hash":"b7c14cb9d06878a5939b941f53c025744fc8dcb2","modified":1638786040061},{"_id":"themes/keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1631590570171},{"_id":"themes/keep/.gitignore","hash":"9f5eebec6128f0029691c28190673d959cb0f234","modified":1631590570171},{"_id":"themes/keep/_config.yml","hash":"591bab095bc54c47f709f0c5c90901a99be669d6","modified":1640858823078},{"_id":"themes/keep/README_zh-CN.md","hash":"def1e590f03786a880a91095c9be975b56b670b6","modified":1631590570172},{"_id":"themes/keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1631590570173},{"_id":"themes/keep/languages/zh-CN.yml","hash":"eeae69704efe5b3fa05306505fa28efca7e49ccb","modified":1631590570173},{"_id":"themes/keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1631590570183},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1631590570183},{"_id":"themes/keep/layout/article-content.ejs","hash":"91a45d3237b89c94272d493872e2fa49cca11b20","modified":1631590570183},{"_id":"themes/keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1631590570184},{"_id":"themes/keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1631590570184},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1631590570184},{"_id":"themes/keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1631590570184},{"_id":"themes/keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1631590570185},{"_id":"themes/keep/layout/layout.ejs","hash":"a2d3f1ee6a79810de41d80b80c087f675f86ef84","modified":1631590570185},{"_id":"themes/keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1631590570185},{"_id":"themes/keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1631590570185},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1631590570186},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1631590570186},{"_id":"themes/keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1631590570188},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1631590570174},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"7bbdce45a7fa5a5d884fc63f2b44fe5bd7bc4293","modified":1631590570176},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1631590570174},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1631590570177},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"23a8a53cfa0b3d050ba040e8753d909dbb32b892","modified":1631590570178},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1631590570178},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"31da3892b805143eca3d2f8abb1c56ea50298657","modified":1631590570178},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1631590570178},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1631590570179},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1631590570179},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1631590570179},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1631590570179},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1631590570180},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1631590570181},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1631590570181},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1631590570182},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1631590570182},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1631590570182},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1631590570182},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1631590570187},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1631590570187},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1631590570187},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"75fbc00fc237d8c7218762288d96d46f6270ed3c","modified":1631590570188},{"_id":"themes/keep/LICENSE","hash":"c6b9025c1a23ad625f9a151f51d55c82d7197d04","modified":1631590570172},{"_id":"themes/keep/README.md","hash":"b6ba7b8340befd417eed0de655f2bb6beaa1ee91","modified":1631590570172},{"_id":"themes/keep/package.json","hash":"e32928dcc246316818f41147a13cccf3ae9acb16","modified":1631590570186},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1631590570195},{"_id":"themes/keep/source/css/style.styl","hash":"aebd99d9ad936eb216b5fc69d5f91efc8259d733","modified":1631590570206},{"_id":"themes/keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1631590570208},{"_id":"themes/keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1631590570208},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1631590570208},{"_id":"themes/keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1631590570209},{"_id":"themes/keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1631590570209},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1631590570210},{"_id":"themes/keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1631590570211},{"_id":"themes/keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1631590570211},{"_id":"themes/keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1631590570212},{"_id":"themes/keep/source/js/utils.js","hash":"cddc4b2d28a02b327e4b4d0401bbea80255fe9d3","modified":1631590570212},{"_id":"themes/keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1631590570206},{"_id":"themes/keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1631590570207},{"_id":"themes/keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1631590570207},{"_id":"themes/keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1631590570207},{"_id":"themes/keep/source/images/dahzi.png","hash":"2a0d9a9abe811ac362512997dd3ff01102310d07","modified":1631592000775},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1631590570225},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1631590570227},{"_id":"themes/keep/source/images/mu.png","hash":"8c903b88cd69d2ce61e6e9031f6e1bd462d88c53","modified":1631601730394},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1631590570228},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1631590570227},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1631590570176},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1631590570176},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1631590570177},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1631590570177},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1631590570180},{"_id":"themes/keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1631590570189},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1631590570192},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1631590570193},{"_id":"themes/keep/source/css/common/basic.styl","hash":"d5e895ef58e342f5b74edc4803aad76dfb447517","modified":1631590570189},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"254ca2715de67d5783adfae40723a7917b6d9f8a","modified":1631590570203},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"84aac4c31e9a8d9d6de0f7291ab0ae8ef9fddb00","modified":1631590570204},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"9af1e7fbc52aad0b4a47593813961a32a1d2b5c5","modified":1631590570205},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"28ea212b14e664d08de4ce93db1e0153e48a11ed","modified":1631590570205},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"029336439c79ece32d25f8fee9dc018206fbcd1b","modified":1631590570205},{"_id":"themes/keep/source/css/layout/page.styl","hash":"46f587c857e84095c9f49b9eb1ad23cdcdd33d27","modified":1631590570206},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"73af0b51aee119b2135dc8cd53cd3a3ad215fff6","modified":1631590570206},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1631590570211},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1631590570210},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1631590570189},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1631590570196},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1631590570196},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"a00b390368064528a29bb8e2f086afdf5c59cd22","modified":1631590570198},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"9422e7d052f9e8a81d5a9acf12af9670fe2c41bb","modified":1631590570200},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1631590570200},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"2bfe1bddb6224958f29e77bcb730cb7af547a5ae","modified":1631590570201},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1631590570201},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1631590570201},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"97768d3f95e8cf36fd3f783a5deb7e8fcaa5c67d","modified":1631590570202},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1631590570202},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1631590570202},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1631590570202},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"f1cec5eb066c13f17d0acc997790404d059fbd3f","modified":1631590570203},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"39d03031033aa3bb9d3a76fdb5056966334e9221","modified":1631590570203},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1631590570203},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1631590570198},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1631590570199},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1631590570199},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1631590570200},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1631590570223},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1631590570224},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1631590570241},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1631590570242},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1631590570190},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1631590570191},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1631590570215},{"_id":"themes/keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1631590570193},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1631590570223},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1631590570226},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1631590570231},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1631590570240},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1631590570220},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1631590570237},{"_id":"public/about/index.html","hash":"94a3ba3f70692e3fe9197a36577d7073eb9c7e7c","modified":1640858890795},{"_id":"public/categories/index.html","hash":"835ecee2e4d0e79b107f3a399d73cf24a73a5c89","modified":1640858890795},{"_id":"public/links/index.html","hash":"06c8cb6366ca98adb7c31cfd414ae462ed87cd45","modified":1640858890795},{"_id":"public/picture/index.html","hash":"506a50a0f5478e67e8ed27924b05613a26a65c12","modified":1640858890795},{"_id":"public/tags/index.html","hash":"ed4c0d338874e647aa2a844a897e714f848aa5fa","modified":1640858890795},{"_id":"public/2021/09/05/vue面试题/index.html","hash":"73c3d01d9a9d3b74af4661a89072a5f8263d444b","modified":1640858890795},{"_id":"public/2021/08/31/css开发中常用代码段/index.html","hash":"33cf05b840c7a9b79cd761eddd52135858edf660","modified":1640858890795},{"_id":"public/archives/index.html","hash":"4eb7756340f5ca1e3a28749144617ff5191959e1","modified":1640858890795},{"_id":"public/archives/2021/index.html","hash":"823cdaa00b63b761c87a55aa5be92b86bd0a5f0c","modified":1640858890795},{"_id":"public/archives/2021/08/index.html","hash":"687712bdc1845cc8841406f7ccd0da08aaef430a","modified":1640858890795},{"_id":"public/archives/2021/09/index.html","hash":"7d68d9dd45ac2217352e42b98f3af301688af036","modified":1640858890795},{"_id":"public/archives/2021/12/index.html","hash":"e727f1db655d032decce40946376e24178a30b2b","modified":1640858890795},{"_id":"public/categories/Javascript/index.html","hash":"dc55ca4926f5db31f7449817b0787df4189b5dd1","modified":1640858890795},{"_id":"public/categories/Typescript/index.html","hash":"a985b6bb1baf737119376d187d1884a6a651dbf1","modified":1640858890795},{"_id":"public/categories/CSS/index.html","hash":"bf72d34866b1db032c2c012c3ce60aaec21763e9","modified":1640858890795},{"_id":"public/categories/SVG/index.html","hash":"eb9c863ecadbcab07a8ea09ecafccfc5794cc9f9","modified":1640858890795},{"_id":"public/tags/js/index.html","hash":"8fee5d3295206d9f92f609d3c8e14a33ea6ca36c","modified":1640858890795},{"_id":"public/tags/ES6/index.html","hash":"ec9239157d94445cd4d50d2527d875de354a4cd8","modified":1640858890795},{"_id":"public/tags/iterator/index.html","hash":"b2cd2fab3e3a65fa3010f84349f64b93b951b47c","modified":1640858890795},{"_id":"public/tags/Javascript/index.html","hash":"ebbba96911d4c978a156913bf3954c727a9f9d9c","modified":1640858890795},{"_id":"public/tags/Typescript/index.html","hash":"77a3c7a7e321a0f54b9ded8502cc6ad09eb13338","modified":1640858890795},{"_id":"public/tags/css/index.html","hash":"26e6cb43098b310f5c8e70d7eb66db6c27a339a6","modified":1640858890795},{"_id":"public/tags/svg/index.html","hash":"e59b4555f419016dc4b6e59330a7cf7fad266c48","modified":1640858890795},{"_id":"public/tags/对象/index.html","hash":"60ef45e1337dcf3f37b73753f04dd5003d3e88a1","modified":1640858890795},{"_id":"public/tags/字符串/index.html","hash":"ab4f7ed8933b3117cc3810eceaf4415365daadbf","modified":1640858890795},{"_id":"public/tags/数组/index.html","hash":"f20b16e5ca548241a3b325616c8ec2ba775ef99e","modified":1640858890795},{"_id":"public/2021/12/06/svg入门教程/index.html","hash":"b420ae13cd7d67da60c590e8bf08ed94de4a3873","modified":1640858890795},{"_id":"public/2021/09/04/探究时间对象的相关问题/index.html","hash":"d6f5f933ff41b7829a69eb94970f4fe8fd17b8e5","modified":1640858890795},{"_id":"public/2021/09/03/Typescript与Javascript有何不同？/index.html","hash":"e3d426e294c378d937b8c64f8550957f7d1c48cd","modified":1640858890795},{"_id":"public/2021/08/31/Javascript内置的可迭代对象/index.html","hash":"b334b7df91f3de2840a21576854661bc24ec0a96","modified":1640858890795},{"_id":"public/2021/08/01/数组、对象、字符串常见方法/index.html","hash":"a34fe363637c841480579f42f77c310471ff86b5","modified":1640858890795},{"_id":"public/index.html","hash":"ab3d4fc28eed3ce845b7e2ab4b6584b6bdbac86c","modified":1640858890795},{"_id":"public/CNAME","hash":"18023edff5e5397d909dc369694cb7064d6ad39c","modified":1639551976696},{"_id":"public/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1639551976696},{"_id":"public/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1639551976696},{"_id":"public/images/dahzi.png","hash":"2a0d9a9abe811ac362512997dd3ff01102310d07","modified":1639551976696},{"_id":"public/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1639551976696},{"_id":"public/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1639551976696},{"_id":"public/images/mu.png","hash":"8c903b88cd69d2ce61e6e9031f6e1bd462d88c53","modified":1639551976696},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1639551976696},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1639551976696},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1639551976696},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1639551976696},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1639551976696},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1639551976696},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1639551976696},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1639551976696},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1639551976696},{"_id":"public/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1639551976696},{"_id":"public/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1639551976696},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1639551976696},{"_id":"public/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1639551976696},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1639551976696},{"_id":"public/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1639551976696},{"_id":"public/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1639551976696},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1639551976696},{"_id":"public/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1639551976696},{"_id":"public/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1639551976696},{"_id":"public/js/utils.js","hash":"47c6d222a116498359345777aea383c429975abf","modified":1639551976696},{"_id":"public/css/common/animated.css","hash":"654c7588d80dc8b481a203e3071b3cedd41c7fde","modified":1639551976696},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639551976696},{"_id":"public/css/common/basic.css","hash":"90463d324ee0315e8f8bc620e7592a54d9220648","modified":1639551976696},{"_id":"public/css/common/markdown.css","hash":"8c9fb9f7fb403e76a4446a7e533ebe36dd702483","modified":1639551976696},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639551976696},{"_id":"public/css/common/variables.css","hash":"157311f7b38a76721f2b6a2a9bd5229fac60df41","modified":1639551976696},{"_id":"public/css/layout/article-content.css","hash":"bb2e9b90086c4a014d0dbeb97cd0beedab27fe9c","modified":1639551976696},{"_id":"public/css/layout/category-content.css","hash":"9687f9cbe029092b633fb804c28ecdcb54860511","modified":1639551976696},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1639551976696},{"_id":"public/css/layout/tag-content.css","hash":"90b0cff1ef0228035cdca9ade2adef71c6c8fb5e","modified":1639551976696},{"_id":"public/css/layout/home-content.css","hash":"be1438b849ebf82cea573986fbbd1deed5334a72","modified":1639551976696},{"_id":"public/css/layout/page.css","hash":"dc57eee2b360ad0e9910d69653d547f033dbbd4c","modified":1639551976696},{"_id":"public/css/common/codeblock/code-theme.css","hash":"0edc6d498dc0abbaadb152b48e9e7bebb6fd15f4","modified":1639551976696},{"_id":"public/css/common/codeblock/copy-code.css","hash":"fa5f022395fe92b6daea063418a32f8c19be6168","modified":1639551976696},{"_id":"public/css/common/codeblock/highlight.css","hash":"a6584196f859d00cdd962f43c809e44ed89319e4","modified":1639551976696},{"_id":"public/css/style.css","hash":"2fb122e522f7018e6486d24c48adf37c6968bf1c","modified":1639551976696},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1639551976696},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1639551976696},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1639551976696},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1639551976696},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1639551976696},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1639551976696},{"_id":"public/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1639551976696},{"_id":"public/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1639551976696},{"_id":"source/picture/img/yy2.jpg","hash":"ce631e1a6af928d25ae71ccd3890d9e36c41b756","modified":1640856871824},{"_id":"source/picture/img/yy3.jpg","hash":"5f4c134cdf0d42ebff4313e429f0e41a08ec86da","modified":1640856862896},{"_id":"source/picture/img/yy4.jpg","hash":"5f4c134cdf0d42ebff4313e429f0e41a08ec86da","modified":1640856881342},{"_id":"source/picture/img/yy1.jpg","hash":"a5a576996c72765e1b92d6cd0c68aef59f0e5c77","modified":1640856867620},{"_id":"public/picture/img/yy2.jpg","hash":"ce631e1a6af928d25ae71ccd3890d9e36c41b756","modified":1640858890795},{"_id":"public/picture/img/yy4.jpg","hash":"5f4c134cdf0d42ebff4313e429f0e41a08ec86da","modified":1640858890795},{"_id":"public/picture/img/yy1.jpg","hash":"a5a576996c72765e1b92d6cd0c68aef59f0e5c77","modified":1640858890795},{"_id":"public/picture/img/yy3.jpg","hash":"5f4c134cdf0d42ebff4313e429f0e41a08ec86da","modified":1640858890795}],"Category":[{"name":"Javascript","_id":"ckx76wyc5000464ddejeq0kfx"},{"name":"Typescript","_id":"ckx76wyce000c64dd8hfgabuz"},{"name":"CSS","_id":"ckx76wyci000h64dd833v4hm5"},{"name":"SVG","_id":"ckx76wycj000k64ddenac4rtq"}],"Data":[],"Page":[{"title":"about","layout":"about","date":"2021-08-31T09:18:00.000Z","_content":"**个人简介：**  \n 前端工程师  \n 工龄：2年半  \n 性别：女  \n 喜欢编程，爱折腾、捣鼓，除此之外超级喜欢杨洋","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2021-08-31 17:18:00\n---\n**个人简介：**  \n 前端工程师  \n 工龄：2年半  \n 性别：女  \n 喜欢编程，爱折腾、捣鼓，除此之外超级喜欢杨洋","updated":"2021-09-14T09:59:07.378Z","path":"about/index.html","comments":1,"_id":"ckx76wybw000064dd5fl6hun3","content":"<p><strong>个人简介：</strong><br> 前端工程师<br> 工龄：2年半<br> 性别：女<br> 喜欢编程，爱折腾、捣鼓，除此之外超级喜欢杨洋</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>个人简介：</strong><br> 前端工程师<br> 工龄：2年半<br> 性别：女<br> 喜欢编程，爱折腾、捣鼓，除此之外超级喜欢杨洋</p>\n"},{"title":"categories","date":"2021-09-14T10:11:32.000Z","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-09-14 18:11:32\nlayout: \"categories\"\n---\n\n","updated":"2021-09-14T10:11:58.152Z","path":"categories/index.html","comments":1,"_id":"ckx76wyc3000264ddcd3zcasg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"links","date":"2021-09-14T09:42:57.000Z","layout":"links","_content":"\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2021-09-14 17:42:57\nlayout: \"links\"\n---\n\n","updated":"2021-09-14T09:58:30.624Z","path":"links/index.html","comments":1,"_id":"ckx76wyc9000664dd9ec57ppk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"picture","date":"2021-09-14T09:41:41.000Z","layout":"picture","_content":"\n\n<p style=\"display: flex;\">\n\t<img src=\"./img/yy1.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy2.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy3.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy4.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n</p>\n","source":"picture/index.md","raw":"---\ntitle: picture\ndate: 2021-09-14 17:41:41\nlayout: \"picture\"\n---\n\n\n<p style=\"display: flex;\">\n\t<img src=\"./img/yy1.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy2.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy3.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n\t<img src=\"./img/yy4.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n</p>\n","updated":"2021-12-30T09:51:48.911Z","path":"picture/index.html","_id":"ckx76wycb000864dd0d6e27j6","comments":1,"content":"<p style=\"display: flex;\">\n    <img src=\"./img/yy1.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy2.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy3.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy4.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n</p>\n","site":{"data":{}},"excerpt":"","more":"<p style=\"display: flex;\">\n    <img src=\"./img/yy1.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy2.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy3.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n    <img src=\"./img/yy4.jpg\" alt=\"杨洋\" style=\"width: 100px;margin-right:10px;\" />\n</p>\n"},{"title":"tags","date":"2021-09-14T09:42:10.000Z","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-09-14 17:42:10\nlayout: \"tags\"\n---\n\n","updated":"2021-09-14T09:51:11.476Z","path":"tags/index.html","comments":1,"_id":"ckx76wycd000a64dd3o6y5bcp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Javascript内置的可迭代对象","date":"2021-08-31T09:26:35.000Z","_content":"\n### js内置的可迭代对象\n\n> ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）\n>\n> 也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)\n>\n> 因此 js可迭代对象有：`Array`、`Map`、`Set`、`String`、`Typed Array`、`函数的arguements`、`NodeList对象`\n\n#### 数组Arrays\n\n```\nconsole.log([][Symbol.iterator])\n \nfor(let x of ['a','b'])\n  console.log(x)\n```\n\n#### 字符串Strings \n\n```\nconsole.log(\"\"[Symbol.iterator])\nfor(let x of \"abc\")\n  console.log(x)\n```\n\n####  Map\n\n```\nlet map = new Map().set('a', 1).set('b', 2);\nconsole.log(map[Symbol.iterator]);\nfor (let pair of map) {\n  console.log(pair);\n}\n```\n\n####  Set\n\n```\nlet set = new Set().add('a').add('b');\nfor (let x of set) {\n  console.log(x);\n}\n```\n\n####   arguments\n\n```\nfunction printArgs() {\n  for (let x of arguments) {\n    console.log(x);\n  }\n}\nprintArgs('a', 'b');\n```\n\n####  Typed Arrays\n\n####  Generators，ES6新增加","source":"_posts/Javascript内置的可迭代对象.md","raw":"---\ntitle: Javascript内置的可迭代对象\ndate: 2021-08-31 17:26:35\ncategories: \n- Javascript\ntags:\n- js\n- ES6\n- iterator\n---\n\n### js内置的可迭代对象\n\n> ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）\n>\n> 也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)\n>\n> 因此 js可迭代对象有：`Array`、`Map`、`Set`、`String`、`Typed Array`、`函数的arguements`、`NodeList对象`\n\n#### 数组Arrays\n\n```\nconsole.log([][Symbol.iterator])\n \nfor(let x of ['a','b'])\n  console.log(x)\n```\n\n#### 字符串Strings \n\n```\nconsole.log(\"\"[Symbol.iterator])\nfor(let x of \"abc\")\n  console.log(x)\n```\n\n####  Map\n\n```\nlet map = new Map().set('a', 1).set('b', 2);\nconsole.log(map[Symbol.iterator]);\nfor (let pair of map) {\n  console.log(pair);\n}\n```\n\n####  Set\n\n```\nlet set = new Set().add('a').add('b');\nfor (let x of set) {\n  console.log(x);\n}\n```\n\n####   arguments\n\n```\nfunction printArgs() {\n  for (let x of arguments) {\n    console.log(x);\n  }\n}\nprintArgs('a', 'b');\n```\n\n####  Typed Arrays\n\n####  Generators，ES6新增加","slug":"Javascript内置的可迭代对象","published":1,"updated":"2021-09-14T10:14:54.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wyc0000164ddafbw5jnu","content":"<h3 id=\"js内置的可迭代对象\"><a href=\"#js内置的可迭代对象\" class=\"headerlink\" title=\"js内置的可迭代对象\"></a>js内置的可迭代对象</h3><blockquote>\n<p>ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）</p>\n<p>也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)</p>\n<p>因此 js可迭代对象有：<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Typed Array</code>、<code>函数的arguements</code>、<code>NodeList对象</code></p>\n</blockquote>\n<h4 id=\"数组Arrays\"><a href=\"#数组Arrays\" class=\"headerlink\" title=\"数组Arrays\"></a>数组Arrays</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log([][Symbol.iterator])</span><br><span class=\"line\"> </span><br><span class=\"line\">for(let x of [&#x27;a&#x27;,&#x27;b&#x27;])</span><br><span class=\"line\">  console.log(x)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串Strings\"><a href=\"#字符串Strings\" class=\"headerlink\" title=\"字符串Strings\"></a>字符串Strings</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot;&quot;[Symbol.iterator])</span><br><span class=\"line\">for(let x of &quot;abc&quot;)</span><br><span class=\"line\">  console.log(x)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map().set(&#x27;a&#x27;, 1).set(&#x27;b&#x27;, 2);</span><br><span class=\"line\">console.log(map[Symbol.iterator]);</span><br><span class=\"line\">for (let pair of map) &#123;</span><br><span class=\"line\">  console.log(pair);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let set = new Set().add(&#x27;a&#x27;).add(&#x27;b&#x27;);</span><br><span class=\"line\">for (let x of set) &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function printArgs() &#123;</span><br><span class=\"line\">  for (let x of arguments) &#123;</span><br><span class=\"line\">    console.log(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printArgs(&#x27;a&#x27;, &#x27;b&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Typed-Arrays\"><a href=\"#Typed-Arrays\" class=\"headerlink\" title=\"Typed Arrays\"></a>Typed Arrays</h4><h4 id=\"Generators，ES6新增加\"><a href=\"#Generators，ES6新增加\" class=\"headerlink\" title=\"Generators，ES6新增加\"></a>Generators，ES6新增加</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js内置的可迭代对象\"><a href=\"#js内置的可迭代对象\" class=\"headerlink\" title=\"js内置的可迭代对象\"></a>js内置的可迭代对象</h3><blockquote>\n<p>ES6中引入了迭代器和可迭代对象，并提出对迭代对象的支持（for···of循环、Map(iterable)构造器等···）</p>\n<p>也就是说一个数据结构只要具有symbol.iterator属性，就可以认为是可迭代的(iterable)</p>\n<p>因此 js可迭代对象有：<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Typed Array</code>、<code>函数的arguements</code>、<code>NodeList对象</code></p>\n</blockquote>\n<h4 id=\"数组Arrays\"><a href=\"#数组Arrays\" class=\"headerlink\" title=\"数组Arrays\"></a>数组Arrays</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log([][Symbol.iterator])</span><br><span class=\"line\"> </span><br><span class=\"line\">for(let x of [&#x27;a&#x27;,&#x27;b&#x27;])</span><br><span class=\"line\">  console.log(x)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串Strings\"><a href=\"#字符串Strings\" class=\"headerlink\" title=\"字符串Strings\"></a>字符串Strings</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot;&quot;[Symbol.iterator])</span><br><span class=\"line\">for(let x of &quot;abc&quot;)</span><br><span class=\"line\">  console.log(x)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map().set(&#x27;a&#x27;, 1).set(&#x27;b&#x27;, 2);</span><br><span class=\"line\">console.log(map[Symbol.iterator]);</span><br><span class=\"line\">for (let pair of map) &#123;</span><br><span class=\"line\">  console.log(pair);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let set = new Set().add(&#x27;a&#x27;).add(&#x27;b&#x27;);</span><br><span class=\"line\">for (let x of set) &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function printArgs() &#123;</span><br><span class=\"line\">  for (let x of arguments) &#123;</span><br><span class=\"line\">    console.log(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printArgs(&#x27;a&#x27;, &#x27;b&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Typed-Arrays\"><a href=\"#Typed-Arrays\" class=\"headerlink\" title=\"Typed Arrays\"></a>Typed Arrays</h4><h4 id=\"Generators，ES6新增加\"><a href=\"#Generators，ES6新增加\" class=\"headerlink\" title=\"Generators，ES6新增加\"></a>Generators，ES6新增加</h4>"},{"title":"Typescript与Javascript有何不同？","date":"2021-09-03T12:40:53.000Z","_content":"> TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。\n\n> JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集\n\n### 基本类型的语法\n\n```\nlet <变量名>:<数据类型> = 值;\n数据类型有：基本数据类型number、string、boolean、null、undefined、symbol;还可以混合类型声明\n如：let <变量名>:<数据类型1，数据类型2> = 值\n这里既可以满足数据类型1或者数据类型2任意一者即可\n```\n\nEggs：`let num:number = 1`  ,`:number`这里就是定义的数据类型\n\n### 原始数据类型\n\n**字符串string**\n```\nlet firstname: string = 'Captain'; // 字符串字面量\nlet familyname: string = String('S'); // 显式类型转换\nlet fullname: string = `my name is ${firstname}.${familyname}`; // 模板字符串\n```\n**数字number**\n```\n/** 十进制整数 */\nlet integer: number = 6;\n/** 十进制整数 */\nlet integer2: number = Number(42);\n/** 十进制浮点数 */\nlet decimal: number = 3.14;\n/** 二进制整数 */\nlet binary: number = 0b1010;\n/** 八进制整数 */\nlet octal: number = 0o744;\n/** 十六进制整数 */\nlet hex: number = 0xf00d;\n<!-- 遇到比较大的整数的时候可以用big -->\nlet big: bigint =  100n;\n```\n**布尔值boolean**\n```\n/** TypeScript true为 真 */\nlet TypeScriptIsGreat: boolean = true;\n /** TypeScript false 为 否 */\nlet TypeScriptIsBad: boolean = false;\n```\n**Symbol**\n```\n\n```\n**bigint**\n\n**undefined**\n\n**null**\n","source":"_posts/Typescript与Javascript有何不同？.md","raw":"---\ntitle: Typescript与Javascript有何不同？\ncategories:\n  - Typescript\ntags:\n  - Javascript\n  - Typescript\ndate: 2021-09-03 20:40:53\n---\n> TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。\n\n> JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集\n\n### 基本类型的语法\n\n```\nlet <变量名>:<数据类型> = 值;\n数据类型有：基本数据类型number、string、boolean、null、undefined、symbol;还可以混合类型声明\n如：let <变量名>:<数据类型1，数据类型2> = 值\n这里既可以满足数据类型1或者数据类型2任意一者即可\n```\n\nEggs：`let num:number = 1`  ,`:number`这里就是定义的数据类型\n\n### 原始数据类型\n\n**字符串string**\n```\nlet firstname: string = 'Captain'; // 字符串字面量\nlet familyname: string = String('S'); // 显式类型转换\nlet fullname: string = `my name is ${firstname}.${familyname}`; // 模板字符串\n```\n**数字number**\n```\n/** 十进制整数 */\nlet integer: number = 6;\n/** 十进制整数 */\nlet integer2: number = Number(42);\n/** 十进制浮点数 */\nlet decimal: number = 3.14;\n/** 二进制整数 */\nlet binary: number = 0b1010;\n/** 八进制整数 */\nlet octal: number = 0o744;\n/** 十六进制整数 */\nlet hex: number = 0xf00d;\n<!-- 遇到比较大的整数的时候可以用big -->\nlet big: bigint =  100n;\n```\n**布尔值boolean**\n```\n/** TypeScript true为 真 */\nlet TypeScriptIsGreat: boolean = true;\n /** TypeScript false 为 否 */\nlet TypeScriptIsBad: boolean = false;\n```\n**Symbol**\n```\n\n```\n**bigint**\n\n**undefined**\n\n**null**\n","slug":"Typescript与Javascript有何不同？","published":1,"updated":"2021-09-14T10:14:54.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wyc3000364dd77s97qa8","content":"<blockquote>\n<p>TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。</p>\n</blockquote>\n<blockquote>\n<p>JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集</p>\n</blockquote>\n<h3 id=\"基本类型的语法\"><a href=\"#基本类型的语法\" class=\"headerlink\" title=\"基本类型的语法\"></a>基本类型的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &lt;变量名&gt;:&lt;数据类型&gt; = 值;</span><br><span class=\"line\">数据类型有：基本数据类型number、string、boolean、null、undefined、symbol;还可以混合类型声明</span><br><span class=\"line\">如：let &lt;变量名&gt;:&lt;数据类型1，数据类型2&gt; = 值</span><br><span class=\"line\">这里既可以满足数据类型1或者数据类型2任意一者即可</span><br></pre></td></tr></table></figure>\n\n<p>Eggs：<code>let num:number = 1</code>  ,<code>:number</code>这里就是定义的数据类型</p>\n<h3 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3><p><strong>字符串string</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let firstname: string = &#x27;Captain&#x27;; // 字符串字面量</span><br><span class=\"line\">let familyname: string = String(&#x27;S&#x27;); // 显式类型转换</span><br><span class=\"line\">let fullname: string = `my name is $&#123;firstname&#125;.$&#123;familyname&#125;`; // 模板字符串</span><br></pre></td></tr></table></figure>\n<p><strong>数字number</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 十进制整数 */</span><br><span class=\"line\">let integer: number = 6;</span><br><span class=\"line\">/** 十进制整数 */</span><br><span class=\"line\">let integer2: number = Number(42);</span><br><span class=\"line\">/** 十进制浮点数 */</span><br><span class=\"line\">let decimal: number = 3.14;</span><br><span class=\"line\">/** 二进制整数 */</span><br><span class=\"line\">let binary: number = 0b1010;</span><br><span class=\"line\">/** 八进制整数 */</span><br><span class=\"line\">let octal: number = 0o744;</span><br><span class=\"line\">/** 十六进制整数 */</span><br><span class=\"line\">let hex: number = 0xf00d;</span><br><span class=\"line\">&lt;!-- 遇到比较大的整数的时候可以用big --&gt;</span><br><span class=\"line\">let big: bigint =  100n;</span><br></pre></td></tr></table></figure>\n<p><strong>布尔值boolean</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** TypeScript true为 真 */</span><br><span class=\"line\">let TypeScriptIsGreat: boolean = true;</span><br><span class=\"line\"> /** TypeScript false 为 否 */</span><br><span class=\"line\">let TypeScriptIsBad: boolean = false;</span><br></pre></td></tr></table></figure>\n<p><strong>Symbol</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>bigint</strong></p>\n<p><strong>undefined</strong></p>\n<p><strong>null</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>TypeScript 其实就是类型化的 JavaScript，它不仅支持 JavaScript 的所有特性，还在 JavaScript 的基础上添加了静态类型注解扩展。</p>\n</blockquote>\n<blockquote>\n<p>JavaScript 有原始数据类型 string、number等，但是在声明的时候都没有定义数据类型，TypeScript 会对赋值及其他所有操作默认做静态类型检测，也就是说TypeScript 其实就是 JavaScript 的超集</p>\n</blockquote>\n<h3 id=\"基本类型的语法\"><a href=\"#基本类型的语法\" class=\"headerlink\" title=\"基本类型的语法\"></a>基本类型的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &lt;变量名&gt;:&lt;数据类型&gt; = 值;</span><br><span class=\"line\">数据类型有：基本数据类型number、string、boolean、null、undefined、symbol;还可以混合类型声明</span><br><span class=\"line\">如：let &lt;变量名&gt;:&lt;数据类型1，数据类型2&gt; = 值</span><br><span class=\"line\">这里既可以满足数据类型1或者数据类型2任意一者即可</span><br></pre></td></tr></table></figure>\n\n<p>Eggs：<code>let num:number = 1</code>  ,<code>:number</code>这里就是定义的数据类型</p>\n<h3 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3><p><strong>字符串string</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let firstname: string = &#x27;Captain&#x27;; // 字符串字面量</span><br><span class=\"line\">let familyname: string = String(&#x27;S&#x27;); // 显式类型转换</span><br><span class=\"line\">let fullname: string = `my name is $&#123;firstname&#125;.$&#123;familyname&#125;`; // 模板字符串</span><br></pre></td></tr></table></figure>\n<p><strong>数字number</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 十进制整数 */</span><br><span class=\"line\">let integer: number = 6;</span><br><span class=\"line\">/** 十进制整数 */</span><br><span class=\"line\">let integer2: number = Number(42);</span><br><span class=\"line\">/** 十进制浮点数 */</span><br><span class=\"line\">let decimal: number = 3.14;</span><br><span class=\"line\">/** 二进制整数 */</span><br><span class=\"line\">let binary: number = 0b1010;</span><br><span class=\"line\">/** 八进制整数 */</span><br><span class=\"line\">let octal: number = 0o744;</span><br><span class=\"line\">/** 十六进制整数 */</span><br><span class=\"line\">let hex: number = 0xf00d;</span><br><span class=\"line\">&lt;!-- 遇到比较大的整数的时候可以用big --&gt;</span><br><span class=\"line\">let big: bigint =  100n;</span><br></pre></td></tr></table></figure>\n<p><strong>布尔值boolean</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** TypeScript true为 真 */</span><br><span class=\"line\">let TypeScriptIsGreat: boolean = true;</span><br><span class=\"line\"> /** TypeScript false 为 否 */</span><br><span class=\"line\">let TypeScriptIsBad: boolean = false;</span><br></pre></td></tr></table></figure>\n<p><strong>Symbol</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>bigint</strong></p>\n<p><strong>undefined</strong></p>\n<p><strong>null</strong></p>\n"},{"title":"css开发中常用代码段","date":"2021-08-31T10:11:13.000Z","_content":"\n## css 开发中常用代码段\n\n### **超出显示省略号** \n\n#### 单行显示省略号\n\n```css\noverflow:hidden;\ntext-overflow:ellipsis;\nwhite-space:nowrap;\n```\n\n#### 多行显示省略号\n\n```css\ntext-overflow: ellipsis; \ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: n; // n代表行数\noverflow: hidden;\n```","source":"_posts/css开发中常用代码段.md","raw":"---\ntitle: css开发中常用代码段\ndate: 2021-08-31 18:11:13\ncategories: \n- CSS\ntags:\n- css\n---\n\n## css 开发中常用代码段\n\n### **超出显示省略号** \n\n#### 单行显示省略号\n\n```css\noverflow:hidden;\ntext-overflow:ellipsis;\nwhite-space:nowrap;\n```\n\n#### 多行显示省略号\n\n```css\ntext-overflow: ellipsis; \ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: n; // n代表行数\noverflow: hidden;\n```","slug":"css开发中常用代码段","published":1,"updated":"2021-09-14T10:14:54.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wyc9000764ddddej2kr6","content":"<h2 id=\"css-开发中常用代码段\"><a href=\"#css-开发中常用代码段\" class=\"headerlink\" title=\"css 开发中常用代码段\"></a>css 开发中常用代码段</h2><h3 id=\"超出显示省略号\"><a href=\"#超出显示省略号\" class=\"headerlink\" title=\"超出显示省略号\"></a><strong>超出显示省略号</strong></h3><h4 id=\"单行显示省略号\"><a href=\"#单行显示省略号\" class=\"headerlink\" title=\"单行显示省略号\"></a>单行显示省略号</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多行显示省略号\"><a href=\"#多行显示省略号\" class=\"headerlink\" title=\"多行显示省略号\"></a>多行显示省略号</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis; </span><br><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\">-webkit-line-clamp: n; // n代表行数</span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"css-开发中常用代码段\"><a href=\"#css-开发中常用代码段\" class=\"headerlink\" title=\"css 开发中常用代码段\"></a>css 开发中常用代码段</h2><h3 id=\"超出显示省略号\"><a href=\"#超出显示省略号\" class=\"headerlink\" title=\"超出显示省略号\"></a><strong>超出显示省略号</strong></h3><h4 id=\"单行显示省略号\"><a href=\"#单行显示省略号\" class=\"headerlink\" title=\"单行显示省略号\"></a>单行显示省略号</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多行显示省略号\"><a href=\"#多行显示省略号\" class=\"headerlink\" title=\"多行显示省略号\"></a>多行显示省略号</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis; </span><br><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br><span class=\"line\">-webkit-line-clamp: n; // n代表行数</span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>"},{"title":"‘svg入门教程.md’","date":"2021-12-06T09:34:51.000Z","_content":"\n# SVG 学习笔记\n\n最近刚开始学习数据可视化的知识，以下是学习svg的记录：\n\n## 1.svg坐标系：\n\nsvg坐标系：是以左上角开始 x =0，y= 0,坐标是向右向下移动\n\n**svg元素可以相互嵌套**\n\n------\n\n## 2.svg元素：（所有元素除了g都有stroke和fill）\n\n> g：用来将图形进行分组\n>\n> ​\t\tG元素没有X和Y属性\n>\n> ​\t\t样式由它子元素继承\n>\n> rect：矩形（边框和填充都在style样式中）\n>\n> ​\t\t位置由x和y属性确定 \n>\n> ​\t\t大小由width和height确定\n>\n> ​\t\t圆角：\n>\n> ​\t  \t\t  rx：圆角的宽度 \n>\n> ​\t\t\t\try:圆角的高度\n>\n> ​\t\t样式属性\n>\n> ​\t\t\t\t边框：\n>\n> ​\t\t\t\t\t\tstroke: 边框的颜色\n>\n> ​\t\t\t\t\t\tstroke-width:边框的宽度 \n>\n> ​\t\t\t\t\t\tstroke-dasharray：边框设置成虚线 第一个参数为虚线的宽度 第二个参数为虚线两点之间的距离 \n>\n> ​\t\t\t\t\t\tstroke-opacity: 边框的透明度\n>\n> ​\t\t\t\t填充：\n>\n> ​\t\t\t\t\t\tfill：填充的颜色（十六进制或者none） \n>\n> ​\t\t\t\t\t\tfill-opacity：透明度\n>\n> circle：圆形（同rect一样有边框和填充）\n>\n> ​\t\t\t圆心在cx,cy处，半径为r\n>\n> ellipse：椭圆形（同rect一样有边框和填充）\n>\n> ​\t\t\t\t`椭圆的圆心在cx，cy`\n>\n> ​\t\t\t\t`rx：椭圆在x轴上的半径 ry:椭圆在y轴上的半径`\n>\n> ​\t\t\t\t`rx = ry 则为圆形`\n>\n> line：绘制直线\n>\n> ​\t\t\t\t起点坐标 x1,y1\n>\n> ​\t\t\t\t终点坐标 x2,y2\n>\n> ​\t\t\t\t可以设置stroke:颜色(十六进制);和粗细\n>\n> Polyline：折线\n>\n> ​\t\t\t\t每个点都是points属性中的x,y值 `<polyline points = \"10,0  60,0 75,50\"></polyline>`\n>\n> ​\t\t\t\t可以设置填充fill：颜色，不设置默认黑色\n>\n> polygon：绘制多边形（至少三个点 两点就变成一条直线了）（同rect一样有边框和填充）\n>\n> ​\t\t\t\t两点之间绘制一条线 几个绘制几条线 `<polygon points = \"10,0  60,0 35,50\"></polygon>` 这就是一个三角形\n>\n> path：用于绘制组合线条、弧线、曲线等填充或非填充的高级形状\n>\n> ​\t\t\t\t所有绘图都在d属性中指定\n>\n> ​\t\t\t\tM发出“移至”命令\n>\n> ​\t\t\t\tA或a发出“弧”命令 \n>\n> ​\t\t\t\t\t\trx（x方向上的半径），第二个参数是ry（y轴的半径） \n>\n> ​\t\t\t\t\t\t第三个参数是x-axis-rotation：相对于正常x轴有一定的旋转的角度 一般为0\n>\n> ​\t\t\t\t\t\t第四和第五个参数分别是large-arc-flag和sweep-flag\n>\n> ​\t\t\t\t\t\tA发出命令后跟的绝对点\n>\n> ​\t\t\t\t\t\ta发出命令后跟的是相对点 （m后跟的点+相对点的位置）\n>\n> ​\t\t\t\tL或l发出“线段”命令\n>\n> ​\t\t\t\t\t\tL发出命令后跟的绝对点\n>\n> ​\t\t\t\t\t\tl发出命令后跟的是相对点 （m后跟的点+相对点的位置）\n>\n> ​\t\t\t\t移动虚拟画笔绘图：路径形状始终会从虚拟画笔的最后一个点绘制到一个新点\n>\n> ​\t\t\t\tQ或q:绘制二次贝塞尔曲线(和线段一样) 有一个控制点\n>\n> ​\t\t\t\tC或者c:绘制三次贝塞尔曲线 有两个控制点\n>\n> ​                 Z或者z可用于闭合路径的快捷命令（大小写命令无区别）代表闭合\n>\n> ​\t\t\t\t填充路径fill 可以有标记\n>\n> marker：标记线段或路径的开始、中间和结束\n>\n> ​\t\t\t\t<marker>元素必须嵌套在<defs>元素内 <defs>元素内通常保存一组可重用的SVG图片定义。\n>\n> ​\t\t\t\t两个<marker>元素定义了之前图片中展示的开始和结束标记\n>\n> ​\t\t\t\t使用CSS属性marker-start和marker-end引用这两个<marker>元素\n>\n> ```\n> <marker id=\"markerCircle\" markerWidth=\"8\" markerHeight=\"8\" refX=\"5\" refY=\"5\"></marker>\n> ```\n>\n> ​\t\t\t\t宽度markerWidth和高度markerHeight\n>\n> ​\t\t\t\tid属性是用来在<path>元素中对其引用\n>\n> ​\t\t\t\trefX和refY坐标集被用作参考点 此标记的路径的开始位置\n>\n> ​\t\t\t\t在中css样式中引用 `marker-start:url(#标记id)`\n>\n> ​\t\t\t\t<line>、<polyline>和<polygon>元素也可以使用标记\n>\n> ​\t\t\t\t标记单位 makerUnits设置为strokeWidth\n>\n> text:绘制文本\n>\n> ​\t\t\t\t第一个字在x，y处绘制 x确定了左侧的边缘 y是文本的底部\n>\n> ​\t\t\t\t文本瞄点text-anchor \n>\n> ​\t\t\t\t\t\tstart\n>\n> ​\t\t\t\t\t\tmiddle\n>\n> ​\t\t\t\t\t\tend\n>\n> ​\t\t\t\t描边stroke 填充fill\n>\n> ​\t\t\t\t字母之前间距letter-spacing  字距kerning   单词的间距 (文本的词距) word-spacing\n>\n> ​\t\t\t\t无自动换行\n>\n> ​\t\t\t\t垂直文本writing-mode 但如果不想让其旋转 glyph-orientation-vertical：0 （不设置默认旋转90°）\n>\n> ​\t\t\t\t文本方向direction：\n>\n> ​\t\t\t\t\t\tltr：从左到右\n>\n> ​\t\t\t\t\t\trtl：从右到左\n>\n> ​\t\t\t\t添加样式：\n>\n> ​\t\t\t\t\t\t ![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638603277648-e5c532d0-90f8-4725-887e-5acf7a5a2494.png)\t\t\t\t\t\t\n>\n> ​\t\t\t\ttextLength:设置文本的长度\n>\n> ​\t\t\t\t可以搭配使用的元素<tspan> <tref> <textpath>\n>\n> tsapn:用来绘制多行文本\n>\n> ​\t\t\t\t垂直定位：dy\n>\n> ​\t\t\t\t水平定位：dx\n>\n> ​\t\t\t\t带基线偏移baseline-shift的上标super和下标sub\n>\n> <tref>：用来引用<defs>的文本 `<tref xlink:href=\"#id名\"/>`\n>\n> <textpath>：用于沿着路径布局文本\n>\n> ​\t\t\t\t在<defs>元素内的path中定义id 在textpath用xlink:href引用 `<textpath xlink:href=\"#id名\"/>`\n>\n> <switch>：在SVG图片上绘制文本\n>\n> ​\t\t\t\t展示<switch>元素中相应的<g>元素中用systemLanguage属性定义语言的种类\n>\n> <image>:SVG图片中嵌套图片 \n>\n> ​\t\t\t\txlink:href=\"图片的路径\"\n>\n> <a>：SVG图片中创建链接\n>\n> ​\t\t\t\t<a>元素上的xlink:show属性\n>\n> ​\t\t\t\t\t\t\tnew 新窗口中打开链接\n>\n> ​\t\t\t\t\t\t\treplace  替换当前窗口\n>\n> ​\t\t\t\t使用图形作为链接 写在<a></a>之间\n>\n> <defs>：嵌套了在SVG图片中可重用的定义\n>\n> ​\t\t\t\t在<def>元素内定义的图形不会展示在SVG图片上。必须通过<use>元素来引用\n>\n> ​\t\t\t\t引用<g>元素前，必须设置其id属性\n>\n> <use>元素通过xlink:href属性引用<g>元素\n>\n> ​\t\t\t\t<use>元素通过x和y属性指定显示可重用图形的位置  <g>元素中的图形位于0,0处\n>\n> ​\t\t\t\t可以嵌套任何形状元素（rect，line等）和g、symbol\n>\n> <symbol>元素用来定义可重用的标记\n>\n> ​\t\t\t\t嵌套在<symbol>中的形状不会显示，除非其被<use>元素引用\n>\n> ​\t\t\t\t<symbol>元素需要一个id属性供后面的<use>元素引用\n>\n> ​\t\t\t\tpreserveAspectRatio\n>\n> viewBox\n>\n> ​\t\t\t\t<g>元素不能包含这两个属性\n>\n> ​\t\t\t\t<use>：在SVG文档的任何位置复用图形\n>\n> ​\t\t\t\t包括<g>元素和<symbol>元素\n>\n> ​\t\t\t\t复用的图形可以被定义在<defs>元素内或者外面（<symbol>内）\n>\n> ​\t\t\t\t位置x=\"\" y=\"\"\n\n------\n\n## 3.CSS-级联样式表\n\n利用具体的样式属性\n\n使用style属性\n\n使用内联样式表 写在`<svg></svg>`中\n\n使用外联样式表 \n\n```javascript\n<?xml-stylesheet type=\"text/css\" href=\"svg-stylesheet.css\" ?>\n```\n\n在HTML页面使用样式表\n\n```javascript\n<html>\n\t<body>\n\t\t<style>\n\t\t</style>\n\t\t<svg>\n\t\t</svg>\n\t</body>\n</html>\n```\n\n------\n\nSVG CSS属性(不是所有的元素都有)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605822571-e0fc0b6f-8e86-4efd-902c-8ce391d2bc17.png)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605842945-d33deeed-712f-4f74-8ffa-41eedeb23601.png)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605859824-479c0bf4-f9ab-485c-87b7-81839d240832.png)\n\n------\n\n## 4.svg的效果\n\n1.轮廓stroke\n\nstroke-width:宽度\n\nstroke-linecap：渲染方式\n\nbutt 结尾处截断的线头\n\nsquare 超过线段结尾一点\n\nround 圆弧线头\n\nstroke-linejoin 两条线之间的连接\n\nmiter\n\nround\n\nbevel\n\nstroke-miterlimit 限制两条线相交的点之间的距离\n\nstroke-dasharray:虚线轮廓\n\nstroke-dashoffset 开始点\n\nstroke-opacity 轮廓透明度\n\n\n\n------\n\n2.填充fill\n\nfill-opacity 填充透明度\n\nfill-rule 填充复杂图形\n\nnonzero 内部\n\nevenodd 外部\n\n\n\n------\n\n3.视口和视图框\n\n视口：可见区域\n\n视图框：viewBox属性 参数 x y width height\n\n\n\n------\n\n4.动画  嵌套到元素内\n\n- set元素 定时间间隔过去后将属性设置为某个值\n\n  ​\t特定时间设置属性的值，\n\n  - 属性的名称attributeName属性。\n\n- - 在to属性中指定将为其设置的值，\n  - 设置属性值的时间在begin属性中指定。\n\n- - 要设置attributeType = \"XML\"\n\n- animate 用来为SVG形状的属性添加动画\n\n- - fill=\"remove\"   当动画结束时，动画属性被设置为原始值\n  - fill = \"freeze\"   当动画结束时，动画属性保持最终的值不变\n\n- - repeatCount=\"indefinite\" 动画无限重复\n\n- <animateTransform> 形状的transform属性设置动画\n\n- - type属性 动画的类型 scale 缩放 rotate 旋转  transform 平移\n\n- <animateMotion> 使形状沿着路径的线路移动\n\n- - path属性 路径指令 和<path>操作一样\n  - 同步一个动画的开头到另一个动画的结尾 写两个<animate  />\n\n- - - 设置第一个animate 的id\n    - 设置begin=\"第一个动画的id名.end\"\n\n- - 重复动画：有两个属性可以用来实现重复效果的动画\n\n- - - repeatCount\n\n- - - - 设置一个数值，动画会重复固定数值的次数\n      - indefinite 无限执行动画\n\n- - - repeatDur 其指定动画重复的持续事件。\n\n- - - - 设置为indefinite 无限执行动画\n\n1. 脚本 使用JavaScript为SVG添加脚本\n\n- 操作svg和操作HTML元素一样\n\n- - 获取svg ：document.getElementById()\n  - 改变属性值 setAttribute() 包括`style属性`\n\n- - 获取属性值 getAttribute()\n  - 通过元素的`style属性`引用给定的CSS属性来更改SVG元素的CSS属性\n\n------\n\n1. 变换\n\n- translate() 平移   \n\n- - x和y作为参数传递给translate()函数\n\n- rotate() 旋转 \n\n- -  函数默认绕点0,0旋转形状\n  - 如果不想绕0,0旋转 就把x,y传入rotate() 函数中 `transform：rotate(度数,x,y)` 度数为－ 代表逆时针旋转\n\n- scale() 缩放\n\n- - 两个参数 大于1为放大 小于1为缩小\n\n- - - x ：x轴上缩放\n    - y ：y轴上缩放\n\n- skew() 某个指定的角度偏斜给定的轴。\n\n- - skewX()函数使x轴倾斜\n  - skewY()函数y轴倾斜\n\n- matrix() 矩阵 **只能指定前6个值**\n\n- - cos(a)和sin(a)的值必须在被插入矩阵之前被预先计算。参数a是旋转的角度\n\n------\n\n1. 渐变\n\n- 线性渐变<linearGradient> \n\n- - 嵌套在<defs>元素内\n  - 在其他元素内使用style属性里的CSS属性fill（fill: url(#myLinearGradient1)）引用线性渐变。\n\n- - 嵌套了两个<stop>元素\n\n- - - offset 开始和结束的位置\n    - stop-color 停止点的颜色 开始改变或者改变到这个颜色\n\n- - - stop-opacity 停止点的透明度\n\n- 放射渐变<radialGradient> 以圆形方式改变\n\n------\n\n1. 填充图案\n\n- 在<defs>元素内部定义了一个<pattern>元素\n\n- - 要在<pattern>元素上写id和patternUnits=\"userSpaceOnUse\"\n  - 从x,y处开始填充  填充大小由width，height属性确定\n\n- - 在<pattern>中定义填充图形的元素\n  - 填充的图形要变换就要在<pattern>上定义patternTransform属性 可以写变换函数(旋转、缩放、平移)\n\n- 在其他元素上的css样式中引入id `style:\"fill:url(#id名)\"`\n\n------\n\n1. 剪裁路径 用于根据特定剪裁路径SVG形状\n\n- 在<defs>中定义<clipPath>\n\n- - 矩形剪裁\n\n- - - 在<clipPath>中定义(像矩形形状的图案)<rect>\n\n- - - - 最后定义的圆通过CSS属性clip-path引用<clipPath>的id属性\n\n- - 高级剪裁\n\n- - - 在<clipPath>中定义<path>（高级剪裁，圆、椭圆、多边形或者自定义路径）\n\n- - - - 应用于<rect>元素的CSS属性clip-path引用<clipPath>的id属性\n\n- - 分组剪裁\n\n- - - 应用于<g>的的CSS属性clip-path引用<clipPath>的id属性，这个分组里面的所有元素都剪裁\n\n- - 文本剪裁\n\n- - - 除了矩形剪裁，高级路径剪裁还可以文字剪裁，在<clipPath>定义<text>元素\n\n------\n\n1. 遮罩\n\n- 在defs中定义<mask>元素，<mask>元素中定义遮罩层的形状\n- 在<mask>上定义遮罩元素的id\n\n- 在<rect>上css的mask引用id属性 `style=\"mask:url(#id名)\"`\n- 可以在遮罩层使用渐变\n\n- - 先定义渐变 在遮罩中引用渐变 `style=\"fill:url(#渐变id名)\"`\n","source":"_posts/svg入门教程.md","raw":"---\ntitle: ‘svg入门教程.md’\ndate: 2021-12-06 17:34:51\ncategories: \n- SVG\ntags:\n- svg\n---\n\n# SVG 学习笔记\n\n最近刚开始学习数据可视化的知识，以下是学习svg的记录：\n\n## 1.svg坐标系：\n\nsvg坐标系：是以左上角开始 x =0，y= 0,坐标是向右向下移动\n\n**svg元素可以相互嵌套**\n\n------\n\n## 2.svg元素：（所有元素除了g都有stroke和fill）\n\n> g：用来将图形进行分组\n>\n> ​\t\tG元素没有X和Y属性\n>\n> ​\t\t样式由它子元素继承\n>\n> rect：矩形（边框和填充都在style样式中）\n>\n> ​\t\t位置由x和y属性确定 \n>\n> ​\t\t大小由width和height确定\n>\n> ​\t\t圆角：\n>\n> ​\t  \t\t  rx：圆角的宽度 \n>\n> ​\t\t\t\try:圆角的高度\n>\n> ​\t\t样式属性\n>\n> ​\t\t\t\t边框：\n>\n> ​\t\t\t\t\t\tstroke: 边框的颜色\n>\n> ​\t\t\t\t\t\tstroke-width:边框的宽度 \n>\n> ​\t\t\t\t\t\tstroke-dasharray：边框设置成虚线 第一个参数为虚线的宽度 第二个参数为虚线两点之间的距离 \n>\n> ​\t\t\t\t\t\tstroke-opacity: 边框的透明度\n>\n> ​\t\t\t\t填充：\n>\n> ​\t\t\t\t\t\tfill：填充的颜色（十六进制或者none） \n>\n> ​\t\t\t\t\t\tfill-opacity：透明度\n>\n> circle：圆形（同rect一样有边框和填充）\n>\n> ​\t\t\t圆心在cx,cy处，半径为r\n>\n> ellipse：椭圆形（同rect一样有边框和填充）\n>\n> ​\t\t\t\t`椭圆的圆心在cx，cy`\n>\n> ​\t\t\t\t`rx：椭圆在x轴上的半径 ry:椭圆在y轴上的半径`\n>\n> ​\t\t\t\t`rx = ry 则为圆形`\n>\n> line：绘制直线\n>\n> ​\t\t\t\t起点坐标 x1,y1\n>\n> ​\t\t\t\t终点坐标 x2,y2\n>\n> ​\t\t\t\t可以设置stroke:颜色(十六进制);和粗细\n>\n> Polyline：折线\n>\n> ​\t\t\t\t每个点都是points属性中的x,y值 `<polyline points = \"10,0  60,0 75,50\"></polyline>`\n>\n> ​\t\t\t\t可以设置填充fill：颜色，不设置默认黑色\n>\n> polygon：绘制多边形（至少三个点 两点就变成一条直线了）（同rect一样有边框和填充）\n>\n> ​\t\t\t\t两点之间绘制一条线 几个绘制几条线 `<polygon points = \"10,0  60,0 35,50\"></polygon>` 这就是一个三角形\n>\n> path：用于绘制组合线条、弧线、曲线等填充或非填充的高级形状\n>\n> ​\t\t\t\t所有绘图都在d属性中指定\n>\n> ​\t\t\t\tM发出“移至”命令\n>\n> ​\t\t\t\tA或a发出“弧”命令 \n>\n> ​\t\t\t\t\t\trx（x方向上的半径），第二个参数是ry（y轴的半径） \n>\n> ​\t\t\t\t\t\t第三个参数是x-axis-rotation：相对于正常x轴有一定的旋转的角度 一般为0\n>\n> ​\t\t\t\t\t\t第四和第五个参数分别是large-arc-flag和sweep-flag\n>\n> ​\t\t\t\t\t\tA发出命令后跟的绝对点\n>\n> ​\t\t\t\t\t\ta发出命令后跟的是相对点 （m后跟的点+相对点的位置）\n>\n> ​\t\t\t\tL或l发出“线段”命令\n>\n> ​\t\t\t\t\t\tL发出命令后跟的绝对点\n>\n> ​\t\t\t\t\t\tl发出命令后跟的是相对点 （m后跟的点+相对点的位置）\n>\n> ​\t\t\t\t移动虚拟画笔绘图：路径形状始终会从虚拟画笔的最后一个点绘制到一个新点\n>\n> ​\t\t\t\tQ或q:绘制二次贝塞尔曲线(和线段一样) 有一个控制点\n>\n> ​\t\t\t\tC或者c:绘制三次贝塞尔曲线 有两个控制点\n>\n> ​                 Z或者z可用于闭合路径的快捷命令（大小写命令无区别）代表闭合\n>\n> ​\t\t\t\t填充路径fill 可以有标记\n>\n> marker：标记线段或路径的开始、中间和结束\n>\n> ​\t\t\t\t<marker>元素必须嵌套在<defs>元素内 <defs>元素内通常保存一组可重用的SVG图片定义。\n>\n> ​\t\t\t\t两个<marker>元素定义了之前图片中展示的开始和结束标记\n>\n> ​\t\t\t\t使用CSS属性marker-start和marker-end引用这两个<marker>元素\n>\n> ```\n> <marker id=\"markerCircle\" markerWidth=\"8\" markerHeight=\"8\" refX=\"5\" refY=\"5\"></marker>\n> ```\n>\n> ​\t\t\t\t宽度markerWidth和高度markerHeight\n>\n> ​\t\t\t\tid属性是用来在<path>元素中对其引用\n>\n> ​\t\t\t\trefX和refY坐标集被用作参考点 此标记的路径的开始位置\n>\n> ​\t\t\t\t在中css样式中引用 `marker-start:url(#标记id)`\n>\n> ​\t\t\t\t<line>、<polyline>和<polygon>元素也可以使用标记\n>\n> ​\t\t\t\t标记单位 makerUnits设置为strokeWidth\n>\n> text:绘制文本\n>\n> ​\t\t\t\t第一个字在x，y处绘制 x确定了左侧的边缘 y是文本的底部\n>\n> ​\t\t\t\t文本瞄点text-anchor \n>\n> ​\t\t\t\t\t\tstart\n>\n> ​\t\t\t\t\t\tmiddle\n>\n> ​\t\t\t\t\t\tend\n>\n> ​\t\t\t\t描边stroke 填充fill\n>\n> ​\t\t\t\t字母之前间距letter-spacing  字距kerning   单词的间距 (文本的词距) word-spacing\n>\n> ​\t\t\t\t无自动换行\n>\n> ​\t\t\t\t垂直文本writing-mode 但如果不想让其旋转 glyph-orientation-vertical：0 （不设置默认旋转90°）\n>\n> ​\t\t\t\t文本方向direction：\n>\n> ​\t\t\t\t\t\tltr：从左到右\n>\n> ​\t\t\t\t\t\trtl：从右到左\n>\n> ​\t\t\t\t添加样式：\n>\n> ​\t\t\t\t\t\t ![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638603277648-e5c532d0-90f8-4725-887e-5acf7a5a2494.png)\t\t\t\t\t\t\n>\n> ​\t\t\t\ttextLength:设置文本的长度\n>\n> ​\t\t\t\t可以搭配使用的元素<tspan> <tref> <textpath>\n>\n> tsapn:用来绘制多行文本\n>\n> ​\t\t\t\t垂直定位：dy\n>\n> ​\t\t\t\t水平定位：dx\n>\n> ​\t\t\t\t带基线偏移baseline-shift的上标super和下标sub\n>\n> <tref>：用来引用<defs>的文本 `<tref xlink:href=\"#id名\"/>`\n>\n> <textpath>：用于沿着路径布局文本\n>\n> ​\t\t\t\t在<defs>元素内的path中定义id 在textpath用xlink:href引用 `<textpath xlink:href=\"#id名\"/>`\n>\n> <switch>：在SVG图片上绘制文本\n>\n> ​\t\t\t\t展示<switch>元素中相应的<g>元素中用systemLanguage属性定义语言的种类\n>\n> <image>:SVG图片中嵌套图片 \n>\n> ​\t\t\t\txlink:href=\"图片的路径\"\n>\n> <a>：SVG图片中创建链接\n>\n> ​\t\t\t\t<a>元素上的xlink:show属性\n>\n> ​\t\t\t\t\t\t\tnew 新窗口中打开链接\n>\n> ​\t\t\t\t\t\t\treplace  替换当前窗口\n>\n> ​\t\t\t\t使用图形作为链接 写在<a></a>之间\n>\n> <defs>：嵌套了在SVG图片中可重用的定义\n>\n> ​\t\t\t\t在<def>元素内定义的图形不会展示在SVG图片上。必须通过<use>元素来引用\n>\n> ​\t\t\t\t引用<g>元素前，必须设置其id属性\n>\n> <use>元素通过xlink:href属性引用<g>元素\n>\n> ​\t\t\t\t<use>元素通过x和y属性指定显示可重用图形的位置  <g>元素中的图形位于0,0处\n>\n> ​\t\t\t\t可以嵌套任何形状元素（rect，line等）和g、symbol\n>\n> <symbol>元素用来定义可重用的标记\n>\n> ​\t\t\t\t嵌套在<symbol>中的形状不会显示，除非其被<use>元素引用\n>\n> ​\t\t\t\t<symbol>元素需要一个id属性供后面的<use>元素引用\n>\n> ​\t\t\t\tpreserveAspectRatio\n>\n> viewBox\n>\n> ​\t\t\t\t<g>元素不能包含这两个属性\n>\n> ​\t\t\t\t<use>：在SVG文档的任何位置复用图形\n>\n> ​\t\t\t\t包括<g>元素和<symbol>元素\n>\n> ​\t\t\t\t复用的图形可以被定义在<defs>元素内或者外面（<symbol>内）\n>\n> ​\t\t\t\t位置x=\"\" y=\"\"\n\n------\n\n## 3.CSS-级联样式表\n\n利用具体的样式属性\n\n使用style属性\n\n使用内联样式表 写在`<svg></svg>`中\n\n使用外联样式表 \n\n```javascript\n<?xml-stylesheet type=\"text/css\" href=\"svg-stylesheet.css\" ?>\n```\n\n在HTML页面使用样式表\n\n```javascript\n<html>\n\t<body>\n\t\t<style>\n\t\t</style>\n\t\t<svg>\n\t\t</svg>\n\t</body>\n</html>\n```\n\n------\n\nSVG CSS属性(不是所有的元素都有)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605822571-e0fc0b6f-8e86-4efd-902c-8ce391d2bc17.png)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605842945-d33deeed-712f-4f74-8ffa-41eedeb23601.png)\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605859824-479c0bf4-f9ab-485c-87b7-81839d240832.png)\n\n------\n\n## 4.svg的效果\n\n1.轮廓stroke\n\nstroke-width:宽度\n\nstroke-linecap：渲染方式\n\nbutt 结尾处截断的线头\n\nsquare 超过线段结尾一点\n\nround 圆弧线头\n\nstroke-linejoin 两条线之间的连接\n\nmiter\n\nround\n\nbevel\n\nstroke-miterlimit 限制两条线相交的点之间的距离\n\nstroke-dasharray:虚线轮廓\n\nstroke-dashoffset 开始点\n\nstroke-opacity 轮廓透明度\n\n\n\n------\n\n2.填充fill\n\nfill-opacity 填充透明度\n\nfill-rule 填充复杂图形\n\nnonzero 内部\n\nevenodd 外部\n\n\n\n------\n\n3.视口和视图框\n\n视口：可见区域\n\n视图框：viewBox属性 参数 x y width height\n\n\n\n------\n\n4.动画  嵌套到元素内\n\n- set元素 定时间间隔过去后将属性设置为某个值\n\n  ​\t特定时间设置属性的值，\n\n  - 属性的名称attributeName属性。\n\n- - 在to属性中指定将为其设置的值，\n  - 设置属性值的时间在begin属性中指定。\n\n- - 要设置attributeType = \"XML\"\n\n- animate 用来为SVG形状的属性添加动画\n\n- - fill=\"remove\"   当动画结束时，动画属性被设置为原始值\n  - fill = \"freeze\"   当动画结束时，动画属性保持最终的值不变\n\n- - repeatCount=\"indefinite\" 动画无限重复\n\n- <animateTransform> 形状的transform属性设置动画\n\n- - type属性 动画的类型 scale 缩放 rotate 旋转  transform 平移\n\n- <animateMotion> 使形状沿着路径的线路移动\n\n- - path属性 路径指令 和<path>操作一样\n  - 同步一个动画的开头到另一个动画的结尾 写两个<animate  />\n\n- - - 设置第一个animate 的id\n    - 设置begin=\"第一个动画的id名.end\"\n\n- - 重复动画：有两个属性可以用来实现重复效果的动画\n\n- - - repeatCount\n\n- - - - 设置一个数值，动画会重复固定数值的次数\n      - indefinite 无限执行动画\n\n- - - repeatDur 其指定动画重复的持续事件。\n\n- - - - 设置为indefinite 无限执行动画\n\n1. 脚本 使用JavaScript为SVG添加脚本\n\n- 操作svg和操作HTML元素一样\n\n- - 获取svg ：document.getElementById()\n  - 改变属性值 setAttribute() 包括`style属性`\n\n- - 获取属性值 getAttribute()\n  - 通过元素的`style属性`引用给定的CSS属性来更改SVG元素的CSS属性\n\n------\n\n1. 变换\n\n- translate() 平移   \n\n- - x和y作为参数传递给translate()函数\n\n- rotate() 旋转 \n\n- -  函数默认绕点0,0旋转形状\n  - 如果不想绕0,0旋转 就把x,y传入rotate() 函数中 `transform：rotate(度数,x,y)` 度数为－ 代表逆时针旋转\n\n- scale() 缩放\n\n- - 两个参数 大于1为放大 小于1为缩小\n\n- - - x ：x轴上缩放\n    - y ：y轴上缩放\n\n- skew() 某个指定的角度偏斜给定的轴。\n\n- - skewX()函数使x轴倾斜\n  - skewY()函数y轴倾斜\n\n- matrix() 矩阵 **只能指定前6个值**\n\n- - cos(a)和sin(a)的值必须在被插入矩阵之前被预先计算。参数a是旋转的角度\n\n------\n\n1. 渐变\n\n- 线性渐变<linearGradient> \n\n- - 嵌套在<defs>元素内\n  - 在其他元素内使用style属性里的CSS属性fill（fill: url(#myLinearGradient1)）引用线性渐变。\n\n- - 嵌套了两个<stop>元素\n\n- - - offset 开始和结束的位置\n    - stop-color 停止点的颜色 开始改变或者改变到这个颜色\n\n- - - stop-opacity 停止点的透明度\n\n- 放射渐变<radialGradient> 以圆形方式改变\n\n------\n\n1. 填充图案\n\n- 在<defs>元素内部定义了一个<pattern>元素\n\n- - 要在<pattern>元素上写id和patternUnits=\"userSpaceOnUse\"\n  - 从x,y处开始填充  填充大小由width，height属性确定\n\n- - 在<pattern>中定义填充图形的元素\n  - 填充的图形要变换就要在<pattern>上定义patternTransform属性 可以写变换函数(旋转、缩放、平移)\n\n- 在其他元素上的css样式中引入id `style:\"fill:url(#id名)\"`\n\n------\n\n1. 剪裁路径 用于根据特定剪裁路径SVG形状\n\n- 在<defs>中定义<clipPath>\n\n- - 矩形剪裁\n\n- - - 在<clipPath>中定义(像矩形形状的图案)<rect>\n\n- - - - 最后定义的圆通过CSS属性clip-path引用<clipPath>的id属性\n\n- - 高级剪裁\n\n- - - 在<clipPath>中定义<path>（高级剪裁，圆、椭圆、多边形或者自定义路径）\n\n- - - - 应用于<rect>元素的CSS属性clip-path引用<clipPath>的id属性\n\n- - 分组剪裁\n\n- - - 应用于<g>的的CSS属性clip-path引用<clipPath>的id属性，这个分组里面的所有元素都剪裁\n\n- - 文本剪裁\n\n- - - 除了矩形剪裁，高级路径剪裁还可以文字剪裁，在<clipPath>定义<text>元素\n\n------\n\n1. 遮罩\n\n- 在defs中定义<mask>元素，<mask>元素中定义遮罩层的形状\n- 在<mask>上定义遮罩元素的id\n\n- 在<rect>上css的mask引用id属性 `style=\"mask:url(#id名)\"`\n- 可以在遮罩层使用渐变\n\n- - 先定义渐变 在遮罩中引用渐变 `style=\"fill:url(#渐变id名)\"`\n","slug":"svg入门教程","published":1,"updated":"2021-12-06T10:20:40.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wycb000964dd7mwd3a6z","content":"<h1 id=\"SVG-学习笔记\"><a href=\"#SVG-学习笔记\" class=\"headerlink\" title=\"SVG 学习笔记\"></a>SVG 学习笔记</h1><p>最近刚开始学习数据可视化的知识，以下是学习svg的记录：</p>\n<h2 id=\"1-svg坐标系：\"><a href=\"#1-svg坐标系：\" class=\"headerlink\" title=\"1.svg坐标系：\"></a>1.svg坐标系：</h2><p>svg坐标系：是以左上角开始 x =0，y= 0,坐标是向右向下移动</p>\n<p><strong>svg元素可以相互嵌套</strong></p>\n<hr>\n<h2 id=\"2-svg元素：（所有元素除了g都有stroke和fill）\"><a href=\"#2-svg元素：（所有元素除了g都有stroke和fill）\" class=\"headerlink\" title=\"2.svg元素：（所有元素除了g都有stroke和fill）\"></a>2.svg元素：（所有元素除了g都有stroke和fill）</h2><blockquote>\n<p>g：用来将图形进行分组</p>\n<p>​        G元素没有X和Y属性</p>\n<p>​        样式由它子元素继承</p>\n<p>rect：矩形（边框和填充都在style样式中）</p>\n<p>​        位置由x和y属性确定 </p>\n<p>​        大小由width和height确定</p>\n<p>​        圆角：</p>\n<p>​                rx：圆角的宽度 </p>\n<p>​                ry:圆角的高度</p>\n<p>​        样式属性</p>\n<p>​                边框：</p>\n<p>​                        stroke: 边框的颜色</p>\n<p>​                        stroke-width:边框的宽度 </p>\n<p>​                        stroke-dasharray：边框设置成虚线 第一个参数为虚线的宽度 第二个参数为虚线两点之间的距离 </p>\n<p>​                        stroke-opacity: 边框的透明度</p>\n<p>​                填充：</p>\n<p>​                        fill：填充的颜色（十六进制或者none） </p>\n<p>​                        fill-opacity：透明度</p>\n<p>circle：圆形（同rect一样有边框和填充）</p>\n<p>​            圆心在cx,cy处，半径为r</p>\n<p>ellipse：椭圆形（同rect一样有边框和填充）</p>\n<p>​                <code>椭圆的圆心在cx，cy</code></p>\n<p>​                <code>rx：椭圆在x轴上的半径 ry:椭圆在y轴上的半径</code></p>\n<p>​                <code>rx = ry 则为圆形</code></p>\n<p>line：绘制直线</p>\n<p>​                起点坐标 x1,y1</p>\n<p>​                终点坐标 x2,y2</p>\n<p>​                可以设置stroke:颜色(十六进制);和粗细</p>\n<p>Polyline：折线</p>\n<p>​                每个点都是points属性中的x,y值 <code>&lt;polyline points = &quot;10,0  60,0 75,50&quot;&gt;&lt;/polyline&gt;</code></p>\n<p>​                可以设置填充fill：颜色，不设置默认黑色</p>\n<p>polygon：绘制多边形（至少三个点 两点就变成一条直线了）（同rect一样有边框和填充）</p>\n<p>​                两点之间绘制一条线 几个绘制几条线 <code>&lt;polygon points = &quot;10,0  60,0 35,50&quot;&gt;&lt;/polygon&gt;</code> 这就是一个三角形</p>\n<p>path：用于绘制组合线条、弧线、曲线等填充或非填充的高级形状</p>\n<p>​                所有绘图都在d属性中指定</p>\n<p>​                M发出“移至”命令</p>\n<p>​                A或a发出“弧”命令 </p>\n<p>​                        rx（x方向上的半径），第二个参数是ry（y轴的半径） </p>\n<p>​                        第三个参数是x-axis-rotation：相对于正常x轴有一定的旋转的角度 一般为0</p>\n<p>​                        第四和第五个参数分别是large-arc-flag和sweep-flag</p>\n<p>​                        A发出命令后跟的绝对点</p>\n<p>​                        a发出命令后跟的是相对点 （m后跟的点+相对点的位置）</p>\n<p>​                L或l发出“线段”命令</p>\n<p>​                        L发出命令后跟的绝对点</p>\n<p>​                        l发出命令后跟的是相对点 （m后跟的点+相对点的位置）</p>\n<p>​                移动虚拟画笔绘图：路径形状始终会从虚拟画笔的最后一个点绘制到一个新点</p>\n<p>​                Q或q:绘制二次贝塞尔曲线(和线段一样) 有一个控制点</p>\n<p>​                C或者c:绘制三次贝塞尔曲线 有两个控制点</p>\n<p>​                 Z或者z可用于闭合路径的快捷命令（大小写命令无区别）代表闭合</p>\n<p>​                填充路径fill 可以有标记</p>\n<p>marker：标记线段或路径的开始、中间和结束</p>\n<p>​                <marker>元素必须嵌套在<defs>元素内 <defs>元素内通常保存一组可重用的SVG图片定义。</p>\n<p>​                两个<marker>元素定义了之前图片中展示的开始和结束标记</p>\n<p>​                使用CSS属性marker-start和marker-end引用这两个<marker>元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;marker id=&quot;markerCircle&quot; markerWidth=&quot;8&quot; markerHeight=&quot;8&quot; refX=&quot;5&quot; refY=&quot;5&quot;&gt;&lt;/marker&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​                宽度markerWidth和高度markerHeight</p>\n<p>​                id属性是用来在<path>元素中对其引用</p>\n<p>​                refX和refY坐标集被用作参考点 此标记的路径的开始位置</p>\n<p>​                在中css样式中引用 <code>marker-start:url(#标记id)</code></p>\n<p>​                <line>、<polyline>和<polygon>元素也可以使用标记</p>\n<p>​                标记单位 makerUnits设置为strokeWidth</p>\n<p>text:绘制文本</p>\n<p>​                第一个字在x，y处绘制 x确定了左侧的边缘 y是文本的底部</p>\n<p>​                文本瞄点text-anchor </p>\n<p>​                        start</p>\n<p>​                        middle</p>\n<p>​                        end</p>\n<p>​                描边stroke 填充fill</p>\n<p>​                字母之前间距letter-spacing  字距kerning   单词的间距 (文本的词距) word-spacing</p>\n<p>​                无自动换行</p>\n<p>​                垂直文本writing-mode 但如果不想让其旋转 glyph-orientation-vertical：0 （不设置默认旋转90°）</p>\n<p>​                文本方向direction：</p>\n<p>​                        ltr：从左到右</p>\n<p>​                        rtl：从右到左</p>\n<p>​                添加样式：</p>\n<p>​                         <img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638603277648-e5c532d0-90f8-4725-887e-5acf7a5a2494.png\" alt=\"img\">                        </p>\n<p>​                textLength:设置文本的长度</p>\n<p>​                可以搭配使用的元素<tspan> <tref> <textpath></p>\n<p>tsapn:用来绘制多行文本</p>\n<p>​                垂直定位：dy</p>\n<p>​                水平定位：dx</p>\n<p>​                带基线偏移baseline-shift的上标super和下标sub</p>\n<p><tref>：用来引用<defs>的文本 <code>&lt;tref xlink:href=&quot;#id名&quot;/&gt;</code></p>\n<p><textpath>：用于沿着路径布局文本</p>\n<p>​                在<defs>元素内的path中定义id 在textpath用xlink:href引用 <code>&lt;textpath xlink:href=&quot;#id名&quot;/&gt;</code></p>\n<p><switch>：在SVG图片上绘制文本</p>\n<p>​                展示<switch>元素中相应的<g>元素中用systemLanguage属性定义语言的种类</p>\n<p><image>:SVG图片中嵌套图片 </p>\n<p>​                xlink:href=”图片的路径”</p>\n<p><a>：SVG图片中创建链接</p>\n<p>​                <a>元素上的xlink:show属性</p>\n<p>​                            new 新窗口中打开链接</p>\n<p>​                            replace  替换当前窗口</p>\n<p>​                使用图形作为链接 写在<a></a>之间</p>\n<p><defs>：嵌套了在SVG图片中可重用的定义</p>\n<p>​                在<def>元素内定义的图形不会展示在SVG图片上。必须通过<use>元素来引用</p>\n<p>​                引用<g>元素前，必须设置其id属性</p>\n<p><use>元素通过xlink:href属性引用<g>元素</p>\n<p>​                <use>元素通过x和y属性指定显示可重用图形的位置  <g>元素中的图形位于0,0处</p>\n<p>​                可以嵌套任何形状元素（rect，line等）和g、symbol</p>\n<p><symbol>元素用来定义可重用的标记</p>\n<p>​                嵌套在<symbol>中的形状不会显示，除非其被<use>元素引用</p>\n<p>​                <symbol>元素需要一个id属性供后面的<use>元素引用</p>\n<p>​                preserveAspectRatio</p>\n<p>viewBox</p>\n<p>​                <g>元素不能包含这两个属性</p>\n<p>​                <use>：在SVG文档的任何位置复用图形</p>\n<p>​                包括<g>元素和<symbol>元素</p>\n<p>​                复用的图形可以被定义在<defs>元素内或者外面（<symbol>内）</p>\n<p>​                位置x=”” y=””</p>\n</blockquote>\n<hr>\n<h2 id=\"3-CSS-级联样式表\"><a href=\"#3-CSS-级联样式表\" class=\"headerlink\" title=\"3.CSS-级联样式表\"></a>3.CSS-级联样式表</h2><p>利用具体的样式属性</p>\n<p>使用style属性</p>\n<p>使用内联样式表 写在<code>&lt;svg&gt;&lt;/svg&gt;</code>中</p>\n<p>使用外联样式表 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml-stylesheet type=<span class=\"string\">&quot;text/css&quot;</span> href=<span class=\"string\">&quot;svg-stylesheet.css&quot;</span> ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在HTML页面使用样式表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>SVG CSS属性(不是所有的元素都有)</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605822571-e0fc0b6f-8e86-4efd-902c-8ce391d2bc17.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605842945-d33deeed-712f-4f74-8ffa-41eedeb23601.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605859824-479c0bf4-f9ab-485c-87b7-81839d240832.png\" alt=\"img\"></p>\n<hr>\n<h2 id=\"4-svg的效果\"><a href=\"#4-svg的效果\" class=\"headerlink\" title=\"4.svg的效果\"></a>4.svg的效果</h2><p>1.轮廓stroke</p>\n<p>stroke-width:宽度</p>\n<p>stroke-linecap：渲染方式</p>\n<p>butt 结尾处截断的线头</p>\n<p>square 超过线段结尾一点</p>\n<p>round 圆弧线头</p>\n<p>stroke-linejoin 两条线之间的连接</p>\n<p>miter</p>\n<p>round</p>\n<p>bevel</p>\n<p>stroke-miterlimit 限制两条线相交的点之间的距离</p>\n<p>stroke-dasharray:虚线轮廓</p>\n<p>stroke-dashoffset 开始点</p>\n<p>stroke-opacity 轮廓透明度</p>\n<hr>\n<p>2.填充fill</p>\n<p>fill-opacity 填充透明度</p>\n<p>fill-rule 填充复杂图形</p>\n<p>nonzero 内部</p>\n<p>evenodd 外部</p>\n<hr>\n<p>3.视口和视图框</p>\n<p>视口：可见区域</p>\n<p>视图框：viewBox属性 参数 x y width height</p>\n<hr>\n<p>4.动画  嵌套到元素内</p>\n<ul>\n<li><p>set元素 定时间间隔过去后将属性设置为某个值</p>\n<p>​    特定时间设置属性的值，</p>\n<ul>\n<li>属性的名称attributeName属性。</li>\n</ul>\n</li>\n<li><ul>\n<li>在to属性中指定将为其设置的值，</li>\n<li>设置属性值的时间在begin属性中指定。</li>\n</ul>\n</li>\n<li><ul>\n<li>要设置attributeType = “XML”</li>\n</ul>\n</li>\n<li><p>animate 用来为SVG形状的属性添加动画</p>\n</li>\n<li><ul>\n<li>fill=”remove”   当动画结束时，动画属性被设置为原始值</li>\n<li>fill = “freeze”   当动画结束时，动画属性保持最终的值不变</li>\n</ul>\n</li>\n<li><ul>\n<li>repeatCount=”indefinite” 动画无限重复</li>\n</ul>\n</li>\n<li><p><animateTransform> 形状的transform属性设置动画</p>\n</li>\n<li><ul>\n<li>type属性 动画的类型 scale 缩放 rotate 旋转  transform 平移</li>\n</ul>\n</li>\n<li><p><animateMotion> 使形状沿着路径的线路移动</p>\n</li>\n<li><ul>\n<li>path属性 路径指令 和<path>操作一样</li>\n<li>同步一个动画的开头到另一个动画的结尾 写两个<animate  /></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>设置第一个animate 的id</li>\n<li>设置begin=”第一个动画的id名.end”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>重复动画：有两个属性可以用来实现重复效果的动画</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>repeatCount</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>设置一个数值，动画会重复固定数值的次数</li>\n<li>indefinite 无限执行动画</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>repeatDur 其指定动画重复的持续事件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>设置为indefinite 无限执行动画</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>脚本 使用JavaScript为SVG添加脚本</li>\n</ol>\n<ul>\n<li><p>操作svg和操作HTML元素一样</p>\n</li>\n<li><ul>\n<li>获取svg ：document.getElementById()</li>\n<li>改变属性值 setAttribute() 包括<code>style属性</code></li>\n</ul>\n</li>\n<li><ul>\n<li>获取属性值 getAttribute()</li>\n<li>通过元素的<code>style属性</code>引用给定的CSS属性来更改SVG元素的CSS属性</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>变换</li>\n</ol>\n<ul>\n<li><p>translate() 平移   </p>\n</li>\n<li><ul>\n<li>x和y作为参数传递给translate()函数</li>\n</ul>\n</li>\n<li><p>rotate() 旋转 </p>\n</li>\n<li><ul>\n<li> 函数默认绕点0,0旋转形状</li>\n<li>如果不想绕0,0旋转 就把x,y传入rotate() 函数中 <code>transform：rotate(度数,x,y)</code> 度数为－ 代表逆时针旋转</li>\n</ul>\n</li>\n<li><p>scale() 缩放</p>\n</li>\n<li><ul>\n<li>两个参数 大于1为放大 小于1为缩小</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>x ：x轴上缩放</li>\n<li>y ：y轴上缩放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>skew() 某个指定的角度偏斜给定的轴。</p>\n</li>\n<li><ul>\n<li>skewX()函数使x轴倾斜</li>\n<li>skewY()函数y轴倾斜</li>\n</ul>\n</li>\n<li><p>matrix() 矩阵 <strong>只能指定前6个值</strong></p>\n</li>\n<li><ul>\n<li>cos(a)和sin(a)的值必须在被插入矩阵之前被预先计算。参数a是旋转的角度</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>渐变</li>\n</ol>\n<ul>\n<li><p>线性渐变<linearGradient> </p>\n</li>\n<li><ul>\n<li>嵌套在<defs>元素内</li>\n<li>在其他元素内使用style属性里的CSS属性fill（fill: url(#myLinearGradient1)）引用线性渐变。</li>\n</ul>\n</li>\n<li><ul>\n<li>嵌套了两个<stop>元素</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>offset 开始和结束的位置</li>\n<li>stop-color 停止点的颜色 开始改变或者改变到这个颜色</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>stop-opacity 停止点的透明度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>放射渐变<radialGradient> 以圆形方式改变</p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>填充图案</li>\n</ol>\n<ul>\n<li><p>在<defs>元素内部定义了一个<pattern>元素</p>\n</li>\n<li><ul>\n<li>要在<pattern>元素上写id和patternUnits=”userSpaceOnUse”</li>\n<li>从x,y处开始填充  填充大小由width，height属性确定</li>\n</ul>\n</li>\n<li><ul>\n<li>在<pattern>中定义填充图形的元素</li>\n<li>填充的图形要变换就要在<pattern>上定义patternTransform属性 可以写变换函数(旋转、缩放、平移)</li>\n</ul>\n</li>\n<li><p>在其他元素上的css样式中引入id <code>style:&quot;fill:url(#id名)&quot;</code></p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>剪裁路径 用于根据特定剪裁路径SVG形状</li>\n</ol>\n<ul>\n<li><p>在<defs>中定义<clipPath></p>\n</li>\n<li><ul>\n<li>矩形剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在<clipPath>中定义(像矩形形状的图案)<rect></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>最后定义的圆通过CSS属性clip-path引用<clipPath>的id属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>高级剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在<clipPath>中定义<path>（高级剪裁，圆、椭圆、多边形或者自定义路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>应用于<rect>元素的CSS属性clip-path引用<clipPath>的id属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>分组剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>应用于<g>的的CSS属性clip-path引用<clipPath>的id属性，这个分组里面的所有元素都剪裁</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文本剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>除了矩形剪裁，高级路径剪裁还可以文字剪裁，在<clipPath>定义<text>元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>遮罩</li>\n</ol>\n<ul>\n<li><p>在defs中定义<mask>元素，<mask>元素中定义遮罩层的形状</p>\n</li>\n<li><p>在<mask>上定义遮罩元素的id</p>\n</li>\n<li><p>在<rect>上css的mask引用id属性 <code>style=&quot;mask:url(#id名)&quot;</code></p>\n</li>\n<li><p>可以在遮罩层使用渐变</p>\n</li>\n<li><ul>\n<li>先定义渐变 在遮罩中引用渐变 <code>style=&quot;fill:url(#渐变id名)&quot;</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SVG-学习笔记\"><a href=\"#SVG-学习笔记\" class=\"headerlink\" title=\"SVG 学习笔记\"></a>SVG 学习笔记</h1><p>最近刚开始学习数据可视化的知识，以下是学习svg的记录：</p>\n<h2 id=\"1-svg坐标系：\"><a href=\"#1-svg坐标系：\" class=\"headerlink\" title=\"1.svg坐标系：\"></a>1.svg坐标系：</h2><p>svg坐标系：是以左上角开始 x =0，y= 0,坐标是向右向下移动</p>\n<p><strong>svg元素可以相互嵌套</strong></p>\n<hr>\n<h2 id=\"2-svg元素：（所有元素除了g都有stroke和fill）\"><a href=\"#2-svg元素：（所有元素除了g都有stroke和fill）\" class=\"headerlink\" title=\"2.svg元素：（所有元素除了g都有stroke和fill）\"></a>2.svg元素：（所有元素除了g都有stroke和fill）</h2><blockquote>\n<p>g：用来将图形进行分组</p>\n<p>​        G元素没有X和Y属性</p>\n<p>​        样式由它子元素继承</p>\n<p>rect：矩形（边框和填充都在style样式中）</p>\n<p>​        位置由x和y属性确定 </p>\n<p>​        大小由width和height确定</p>\n<p>​        圆角：</p>\n<p>​                rx：圆角的宽度 </p>\n<p>​                ry:圆角的高度</p>\n<p>​        样式属性</p>\n<p>​                边框：</p>\n<p>​                        stroke: 边框的颜色</p>\n<p>​                        stroke-width:边框的宽度 </p>\n<p>​                        stroke-dasharray：边框设置成虚线 第一个参数为虚线的宽度 第二个参数为虚线两点之间的距离 </p>\n<p>​                        stroke-opacity: 边框的透明度</p>\n<p>​                填充：</p>\n<p>​                        fill：填充的颜色（十六进制或者none） </p>\n<p>​                        fill-opacity：透明度</p>\n<p>circle：圆形（同rect一样有边框和填充）</p>\n<p>​            圆心在cx,cy处，半径为r</p>\n<p>ellipse：椭圆形（同rect一样有边框和填充）</p>\n<p>​                <code>椭圆的圆心在cx，cy</code></p>\n<p>​                <code>rx：椭圆在x轴上的半径 ry:椭圆在y轴上的半径</code></p>\n<p>​                <code>rx = ry 则为圆形</code></p>\n<p>line：绘制直线</p>\n<p>​                起点坐标 x1,y1</p>\n<p>​                终点坐标 x2,y2</p>\n<p>​                可以设置stroke:颜色(十六进制);和粗细</p>\n<p>Polyline：折线</p>\n<p>​                每个点都是points属性中的x,y值 <code>&lt;polyline points = &quot;10,0  60,0 75,50&quot;&gt;&lt;/polyline&gt;</code></p>\n<p>​                可以设置填充fill：颜色，不设置默认黑色</p>\n<p>polygon：绘制多边形（至少三个点 两点就变成一条直线了）（同rect一样有边框和填充）</p>\n<p>​                两点之间绘制一条线 几个绘制几条线 <code>&lt;polygon points = &quot;10,0  60,0 35,50&quot;&gt;&lt;/polygon&gt;</code> 这就是一个三角形</p>\n<p>path：用于绘制组合线条、弧线、曲线等填充或非填充的高级形状</p>\n<p>​                所有绘图都在d属性中指定</p>\n<p>​                M发出“移至”命令</p>\n<p>​                A或a发出“弧”命令 </p>\n<p>​                        rx（x方向上的半径），第二个参数是ry（y轴的半径） </p>\n<p>​                        第三个参数是x-axis-rotation：相对于正常x轴有一定的旋转的角度 一般为0</p>\n<p>​                        第四和第五个参数分别是large-arc-flag和sweep-flag</p>\n<p>​                        A发出命令后跟的绝对点</p>\n<p>​                        a发出命令后跟的是相对点 （m后跟的点+相对点的位置）</p>\n<p>​                L或l发出“线段”命令</p>\n<p>​                        L发出命令后跟的绝对点</p>\n<p>​                        l发出命令后跟的是相对点 （m后跟的点+相对点的位置）</p>\n<p>​                移动虚拟画笔绘图：路径形状始终会从虚拟画笔的最后一个点绘制到一个新点</p>\n<p>​                Q或q:绘制二次贝塞尔曲线(和线段一样) 有一个控制点</p>\n<p>​                C或者c:绘制三次贝塞尔曲线 有两个控制点</p>\n<p>​                 Z或者z可用于闭合路径的快捷命令（大小写命令无区别）代表闭合</p>\n<p>​                填充路径fill 可以有标记</p>\n<p>marker：标记线段或路径的开始、中间和结束</p>\n<p>​                <marker>元素必须嵌套在<defs>元素内 <defs>元素内通常保存一组可重用的SVG图片定义。</p>\n<p>​                两个<marker>元素定义了之前图片中展示的开始和结束标记</p>\n<p>​                使用CSS属性marker-start和marker-end引用这两个<marker>元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;marker id=&quot;markerCircle&quot; markerWidth=&quot;8&quot; markerHeight=&quot;8&quot; refX=&quot;5&quot; refY=&quot;5&quot;&gt;&lt;/marker&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​                宽度markerWidth和高度markerHeight</p>\n<p>​                id属性是用来在<path>元素中对其引用</p>\n<p>​                refX和refY坐标集被用作参考点 此标记的路径的开始位置</p>\n<p>​                在中css样式中引用 <code>marker-start:url(#标记id)</code></p>\n<p>​                <line>、<polyline>和<polygon>元素也可以使用标记</p>\n<p>​                标记单位 makerUnits设置为strokeWidth</p>\n<p>text:绘制文本</p>\n<p>​                第一个字在x，y处绘制 x确定了左侧的边缘 y是文本的底部</p>\n<p>​                文本瞄点text-anchor </p>\n<p>​                        start</p>\n<p>​                        middle</p>\n<p>​                        end</p>\n<p>​                描边stroke 填充fill</p>\n<p>​                字母之前间距letter-spacing  字距kerning   单词的间距 (文本的词距) word-spacing</p>\n<p>​                无自动换行</p>\n<p>​                垂直文本writing-mode 但如果不想让其旋转 glyph-orientation-vertical：0 （不设置默认旋转90°）</p>\n<p>​                文本方向direction：</p>\n<p>​                        ltr：从左到右</p>\n<p>​                        rtl：从右到左</p>\n<p>​                添加样式：</p>\n<p>​                         <img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638603277648-e5c532d0-90f8-4725-887e-5acf7a5a2494.png\" alt=\"img\">                        </p>\n<p>​                textLength:设置文本的长度</p>\n<p>​                可以搭配使用的元素<tspan> <tref> <textpath></p>\n<p>tsapn:用来绘制多行文本</p>\n<p>​                垂直定位：dy</p>\n<p>​                水平定位：dx</p>\n<p>​                带基线偏移baseline-shift的上标super和下标sub</p>\n<p><tref>：用来引用<defs>的文本 <code>&lt;tref xlink:href=&quot;#id名&quot;/&gt;</code></p>\n<p><textpath>：用于沿着路径布局文本</p>\n<p>​                在<defs>元素内的path中定义id 在textpath用xlink:href引用 <code>&lt;textpath xlink:href=&quot;#id名&quot;/&gt;</code></p>\n<p><switch>：在SVG图片上绘制文本</p>\n<p>​                展示<switch>元素中相应的<g>元素中用systemLanguage属性定义语言的种类</p>\n<p><image>:SVG图片中嵌套图片 </p>\n<p>​                xlink:href=”图片的路径”</p>\n<p><a>：SVG图片中创建链接</p>\n<p>​                <a>元素上的xlink:show属性</p>\n<p>​                            new 新窗口中打开链接</p>\n<p>​                            replace  替换当前窗口</p>\n<p>​                使用图形作为链接 写在<a></a>之间</p>\n<p><defs>：嵌套了在SVG图片中可重用的定义</p>\n<p>​                在<def>元素内定义的图形不会展示在SVG图片上。必须通过<use>元素来引用</p>\n<p>​                引用<g>元素前，必须设置其id属性</p>\n<p><use>元素通过xlink:href属性引用<g>元素</p>\n<p>​                <use>元素通过x和y属性指定显示可重用图形的位置  <g>元素中的图形位于0,0处</p>\n<p>​                可以嵌套任何形状元素（rect，line等）和g、symbol</p>\n<p><symbol>元素用来定义可重用的标记</p>\n<p>​                嵌套在<symbol>中的形状不会显示，除非其被<use>元素引用</p>\n<p>​                <symbol>元素需要一个id属性供后面的<use>元素引用</p>\n<p>​                preserveAspectRatio</p>\n<p>viewBox</p>\n<p>​                <g>元素不能包含这两个属性</p>\n<p>​                <use>：在SVG文档的任何位置复用图形</p>\n<p>​                包括<g>元素和<symbol>元素</p>\n<p>​                复用的图形可以被定义在<defs>元素内或者外面（<symbol>内）</p>\n<p>​                位置x=”” y=””</p>\n</blockquote>\n<hr>\n<h2 id=\"3-CSS-级联样式表\"><a href=\"#3-CSS-级联样式表\" class=\"headerlink\" title=\"3.CSS-级联样式表\"></a>3.CSS-级联样式表</h2><p>利用具体的样式属性</p>\n<p>使用style属性</p>\n<p>使用内联样式表 写在<code>&lt;svg&gt;&lt;/svg&gt;</code>中</p>\n<p>使用外联样式表 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml-stylesheet type=<span class=\"string\">&quot;text/css&quot;</span> href=<span class=\"string\">&quot;svg-stylesheet.css&quot;</span> ?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在HTML页面使用样式表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>SVG CSS属性(不是所有的元素都有)</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605822571-e0fc0b6f-8e86-4efd-902c-8ce391d2bc17.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605842945-d33deeed-712f-4f74-8ffa-41eedeb23601.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/2861422/1638605859824-479c0bf4-f9ab-485c-87b7-81839d240832.png\" alt=\"img\"></p>\n<hr>\n<h2 id=\"4-svg的效果\"><a href=\"#4-svg的效果\" class=\"headerlink\" title=\"4.svg的效果\"></a>4.svg的效果</h2><p>1.轮廓stroke</p>\n<p>stroke-width:宽度</p>\n<p>stroke-linecap：渲染方式</p>\n<p>butt 结尾处截断的线头</p>\n<p>square 超过线段结尾一点</p>\n<p>round 圆弧线头</p>\n<p>stroke-linejoin 两条线之间的连接</p>\n<p>miter</p>\n<p>round</p>\n<p>bevel</p>\n<p>stroke-miterlimit 限制两条线相交的点之间的距离</p>\n<p>stroke-dasharray:虚线轮廓</p>\n<p>stroke-dashoffset 开始点</p>\n<p>stroke-opacity 轮廓透明度</p>\n<hr>\n<p>2.填充fill</p>\n<p>fill-opacity 填充透明度</p>\n<p>fill-rule 填充复杂图形</p>\n<p>nonzero 内部</p>\n<p>evenodd 外部</p>\n<hr>\n<p>3.视口和视图框</p>\n<p>视口：可见区域</p>\n<p>视图框：viewBox属性 参数 x y width height</p>\n<hr>\n<p>4.动画  嵌套到元素内</p>\n<ul>\n<li><p>set元素 定时间间隔过去后将属性设置为某个值</p>\n<p>​    特定时间设置属性的值，</p>\n<ul>\n<li>属性的名称attributeName属性。</li>\n</ul>\n</li>\n<li><ul>\n<li>在to属性中指定将为其设置的值，</li>\n<li>设置属性值的时间在begin属性中指定。</li>\n</ul>\n</li>\n<li><ul>\n<li>要设置attributeType = “XML”</li>\n</ul>\n</li>\n<li><p>animate 用来为SVG形状的属性添加动画</p>\n</li>\n<li><ul>\n<li>fill=”remove”   当动画结束时，动画属性被设置为原始值</li>\n<li>fill = “freeze”   当动画结束时，动画属性保持最终的值不变</li>\n</ul>\n</li>\n<li><ul>\n<li>repeatCount=”indefinite” 动画无限重复</li>\n</ul>\n</li>\n<li><p><animateTransform> 形状的transform属性设置动画</p>\n</li>\n<li><ul>\n<li>type属性 动画的类型 scale 缩放 rotate 旋转  transform 平移</li>\n</ul>\n</li>\n<li><p><animateMotion> 使形状沿着路径的线路移动</p>\n</li>\n<li><ul>\n<li>path属性 路径指令 和<path>操作一样</li>\n<li>同步一个动画的开头到另一个动画的结尾 写两个<animate  /></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>设置第一个animate 的id</li>\n<li>设置begin=”第一个动画的id名.end”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>重复动画：有两个属性可以用来实现重复效果的动画</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>repeatCount</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>设置一个数值，动画会重复固定数值的次数</li>\n<li>indefinite 无限执行动画</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>repeatDur 其指定动画重复的持续事件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>设置为indefinite 无限执行动画</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>脚本 使用JavaScript为SVG添加脚本</li>\n</ol>\n<ul>\n<li><p>操作svg和操作HTML元素一样</p>\n</li>\n<li><ul>\n<li>获取svg ：document.getElementById()</li>\n<li>改变属性值 setAttribute() 包括<code>style属性</code></li>\n</ul>\n</li>\n<li><ul>\n<li>获取属性值 getAttribute()</li>\n<li>通过元素的<code>style属性</code>引用给定的CSS属性来更改SVG元素的CSS属性</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>变换</li>\n</ol>\n<ul>\n<li><p>translate() 平移   </p>\n</li>\n<li><ul>\n<li>x和y作为参数传递给translate()函数</li>\n</ul>\n</li>\n<li><p>rotate() 旋转 </p>\n</li>\n<li><ul>\n<li> 函数默认绕点0,0旋转形状</li>\n<li>如果不想绕0,0旋转 就把x,y传入rotate() 函数中 <code>transform：rotate(度数,x,y)</code> 度数为－ 代表逆时针旋转</li>\n</ul>\n</li>\n<li><p>scale() 缩放</p>\n</li>\n<li><ul>\n<li>两个参数 大于1为放大 小于1为缩小</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>x ：x轴上缩放</li>\n<li>y ：y轴上缩放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>skew() 某个指定的角度偏斜给定的轴。</p>\n</li>\n<li><ul>\n<li>skewX()函数使x轴倾斜</li>\n<li>skewY()函数y轴倾斜</li>\n</ul>\n</li>\n<li><p>matrix() 矩阵 <strong>只能指定前6个值</strong></p>\n</li>\n<li><ul>\n<li>cos(a)和sin(a)的值必须在被插入矩阵之前被预先计算。参数a是旋转的角度</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>渐变</li>\n</ol>\n<ul>\n<li><p>线性渐变<linearGradient> </p>\n</li>\n<li><ul>\n<li>嵌套在<defs>元素内</li>\n<li>在其他元素内使用style属性里的CSS属性fill（fill: url(#myLinearGradient1)）引用线性渐变。</li>\n</ul>\n</li>\n<li><ul>\n<li>嵌套了两个<stop>元素</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>offset 开始和结束的位置</li>\n<li>stop-color 停止点的颜色 开始改变或者改变到这个颜色</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>stop-opacity 停止点的透明度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>放射渐变<radialGradient> 以圆形方式改变</p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>填充图案</li>\n</ol>\n<ul>\n<li><p>在<defs>元素内部定义了一个<pattern>元素</p>\n</li>\n<li><ul>\n<li>要在<pattern>元素上写id和patternUnits=”userSpaceOnUse”</li>\n<li>从x,y处开始填充  填充大小由width，height属性确定</li>\n</ul>\n</li>\n<li><ul>\n<li>在<pattern>中定义填充图形的元素</li>\n<li>填充的图形要变换就要在<pattern>上定义patternTransform属性 可以写变换函数(旋转、缩放、平移)</li>\n</ul>\n</li>\n<li><p>在其他元素上的css样式中引入id <code>style:&quot;fill:url(#id名)&quot;</code></p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>剪裁路径 用于根据特定剪裁路径SVG形状</li>\n</ol>\n<ul>\n<li><p>在<defs>中定义<clipPath></p>\n</li>\n<li><ul>\n<li>矩形剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在<clipPath>中定义(像矩形形状的图案)<rect></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>最后定义的圆通过CSS属性clip-path引用<clipPath>的id属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>高级剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在<clipPath>中定义<path>（高级剪裁，圆、椭圆、多边形或者自定义路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>应用于<rect>元素的CSS属性clip-path引用<clipPath>的id属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>分组剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>应用于<g>的的CSS属性clip-path引用<clipPath>的id属性，这个分组里面的所有元素都剪裁</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文本剪裁</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>除了矩形剪裁，高级路径剪裁还可以文字剪裁，在<clipPath>定义<text>元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol>\n<li>遮罩</li>\n</ol>\n<ul>\n<li><p>在defs中定义<mask>元素，<mask>元素中定义遮罩层的形状</p>\n</li>\n<li><p>在<mask>上定义遮罩元素的id</p>\n</li>\n<li><p>在<rect>上css的mask引用id属性 <code>style=&quot;mask:url(#id名)&quot;</code></p>\n</li>\n<li><p>可以在遮罩层使用渐变</p>\n</li>\n<li><ul>\n<li>先定义渐变 在遮罩中引用渐变 <code>style=&quot;fill:url(#渐变id名)&quot;</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"vue面试题","date":"2021-09-05T02:00:34.000Z","_content":"","source":"_posts/vue面试题.md","raw":"---\ntitle: vue面试题\ndate: 2021-09-05 10:00:34\ntags:\n---\n","slug":"vue面试题","published":1,"updated":"2021-09-05T02:00:34.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wycd000b64dd6ayv0h1o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"探究时间对象的相关问题","date":"2021-09-04T08:53:18.000Z","_content":"\n\n\n## 时间对象Date()\n\n> 创建一个新的`Date`对象的唯一方法就是通过`new`操作符。\n>\n> ```\n> let newDate = new Date();\n> ```\n>\n> **注意**：如果只是作为常规函数调用，而不加new操作符，返回的只是字符串，不是一个时间对象了。\n\n### `Date()`构造函数有四种形式：\n\n> 1.没有参数 `new Date()`\n>\n> 如果没有提供参数，那么新创建的时间代表当前的时间。\n>\n> 2.Unix时间戳 `new Date(value)`\n>\n> value是int类型的，表示自1970年1月1日00:00:00 UTC以来的毫秒数。\n>\n> 3.时间戳字符串 `new Date(dateString)`\n>\n> 表示日期的字符串值。\n\n### `Date()`的方法\n\n#### *`Date.prototype.getDate()`*\n\n> *`getDate()`*返回一个指定的日期对象为一个月中的具体哪一天\n\n#### `Date.prototype.getDay()`\n\n> **`getDay()`**返回一个具体日期中一周的第几天，0 表示星期天。对于某个月中的第几天\n\n#### *`Date.prototype.getFullYear()`*\n\n> **`getFullYear()`** 方法根据本地时间返回指定日期的年份。\n\n#### *`Date.prototype.getMonth()`*\n\n> 返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）,所以需要月份+1\n\n#### *`Date.prototype.getHours()`*\n\n> **`getHours()`** 返回一个指定的日期对象的小时。\n\n#### *`Date.prototype.getMinutes()`*\n\n> **`getMinutes()`**返回一个指定的日期对象的分钟数。\n\n#### *`Date.prototype.getSeconds()`*\n\n> **`getSeconds()`** 返回一个指定的日期对象的秒数。\n\n#### *`Date.prototype.getTime()`*\n\n> `**getTime()**` 将时间转成时间戳\n\n### 时间戳和时间格式的互转\n\n1.时间戳转成时间格式【以'-‘分割的字符串】\n\n- 只取year-Month-Day\n\n```js\nfunction timestampToTime(timestamp,current) {\n    if(current){\n        //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n         var date = new Date(timestamp); \n    }else{\n        var date = new Date(timestamp * 1000); \n    }\n    var Y = date.getFullYear() + '-';\n    var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n    var D = change(date.getDate()) + ' ';\n    return Y + M + D;\n}\n```\n\n- 包括hour-minute-second\n\n  ```js\n  function formatDateTime(time) {\n      var date = new Date(time);\n      var y = date.getFullYear();\n      var m = date.getMonth() + 1;\n      m = m < 10 ? ('0' + m) : m;\n      var d = date.getDate();\n      d = d < 10 ? ('0' + d) : d;\n      var h = date.getHours();\n      h = h < 10 ? ('0' + h) : h;\n      var minute = date.getMinutes();\n      var second = date.getSeconds();\n      minute = minute < 10 ? ('0' + minute) : minute;\n      second = second < 10 ? ('0' + second) : second;\n      return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second;\n  };\n  // 调用方法\n  formatDateTime(new Date())\n  ```\n\n  \n\n2.时间格式转成时间戳\n\n```js\n方法1：\nnew Date().getTime();\n方法2：\nnew Date().valueOf();\n方法3：\nDate.parse(new Date());\n第三种方法只能精确到秒，前两种方法可以精确到毫秒\n```\n\n","source":"_posts/探究时间对象的相关问题.md","raw":"---\ntitle: 探究时间对象的相关问题\ndate: 2021-09-04 16:53:18\ncategories: \n- Javascript\ntags:\n- 对象\n- js\n- 字符串\n---\n\n\n\n## 时间对象Date()\n\n> 创建一个新的`Date`对象的唯一方法就是通过`new`操作符。\n>\n> ```\n> let newDate = new Date();\n> ```\n>\n> **注意**：如果只是作为常规函数调用，而不加new操作符，返回的只是字符串，不是一个时间对象了。\n\n### `Date()`构造函数有四种形式：\n\n> 1.没有参数 `new Date()`\n>\n> 如果没有提供参数，那么新创建的时间代表当前的时间。\n>\n> 2.Unix时间戳 `new Date(value)`\n>\n> value是int类型的，表示自1970年1月1日00:00:00 UTC以来的毫秒数。\n>\n> 3.时间戳字符串 `new Date(dateString)`\n>\n> 表示日期的字符串值。\n\n### `Date()`的方法\n\n#### *`Date.prototype.getDate()`*\n\n> *`getDate()`*返回一个指定的日期对象为一个月中的具体哪一天\n\n#### `Date.prototype.getDay()`\n\n> **`getDay()`**返回一个具体日期中一周的第几天，0 表示星期天。对于某个月中的第几天\n\n#### *`Date.prototype.getFullYear()`*\n\n> **`getFullYear()`** 方法根据本地时间返回指定日期的年份。\n\n#### *`Date.prototype.getMonth()`*\n\n> 返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）,所以需要月份+1\n\n#### *`Date.prototype.getHours()`*\n\n> **`getHours()`** 返回一个指定的日期对象的小时。\n\n#### *`Date.prototype.getMinutes()`*\n\n> **`getMinutes()`**返回一个指定的日期对象的分钟数。\n\n#### *`Date.prototype.getSeconds()`*\n\n> **`getSeconds()`** 返回一个指定的日期对象的秒数。\n\n#### *`Date.prototype.getTime()`*\n\n> `**getTime()**` 将时间转成时间戳\n\n### 时间戳和时间格式的互转\n\n1.时间戳转成时间格式【以'-‘分割的字符串】\n\n- 只取year-Month-Day\n\n```js\nfunction timestampToTime(timestamp,current) {\n    if(current){\n        //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n         var date = new Date(timestamp); \n    }else{\n        var date = new Date(timestamp * 1000); \n    }\n    var Y = date.getFullYear() + '-';\n    var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n    var D = change(date.getDate()) + ' ';\n    return Y + M + D;\n}\n```\n\n- 包括hour-minute-second\n\n  ```js\n  function formatDateTime(time) {\n      var date = new Date(time);\n      var y = date.getFullYear();\n      var m = date.getMonth() + 1;\n      m = m < 10 ? ('0' + m) : m;\n      var d = date.getDate();\n      d = d < 10 ? ('0' + d) : d;\n      var h = date.getHours();\n      h = h < 10 ? ('0' + h) : h;\n      var minute = date.getMinutes();\n      var second = date.getSeconds();\n      minute = minute < 10 ? ('0' + minute) : minute;\n      second = second < 10 ? ('0' + second) : second;\n      return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second;\n  };\n  // 调用方法\n  formatDateTime(new Date())\n  ```\n\n  \n\n2.时间格式转成时间戳\n\n```js\n方法1：\nnew Date().getTime();\n方法2：\nnew Date().valueOf();\n方法3：\nDate.parse(new Date());\n第三种方法只能精确到秒，前两种方法可以精确到毫秒\n```\n\n","slug":"探究时间对象的相关问题","published":1,"updated":"2021-09-14T10:14:54.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx76wycf000e64ddhl7j1r8u","content":"<h2 id=\"时间对象Date\"><a href=\"#时间对象Date\" class=\"headerlink\" title=\"时间对象Date()\"></a>时间对象Date()</h2><blockquote>\n<p>创建一个新的<code>Date</code>对象的唯一方法就是通过<code>new</code>操作符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let newDate = new Date();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：如果只是作为常规函数调用，而不加new操作符，返回的只是字符串，不是一个时间对象了。</p>\n</blockquote>\n<h3 id=\"Date-构造函数有四种形式：\"><a href=\"#Date-构造函数有四种形式：\" class=\"headerlink\" title=\"Date()构造函数有四种形式：\"></a><code>Date()</code>构造函数有四种形式：</h3><blockquote>\n<p>1.没有参数 <code>new Date()</code></p>\n<p>如果没有提供参数，那么新创建的时间代表当前的时间。</p>\n<p>2.Unix时间戳 <code>new Date(value)</code></p>\n<p>value是int类型的，表示自1970年1月1日00:00:00 UTC以来的毫秒数。</p>\n<p>3.时间戳字符串 <code>new Date(dateString)</code></p>\n<p>表示日期的字符串值。</p>\n</blockquote>\n<h3 id=\"Date-的方法\"><a href=\"#Date-的方法\" class=\"headerlink\" title=\"Date()的方法\"></a><code>Date()</code>的方法</h3><h4 id=\"Date-prototype-getDate\"><a href=\"#Date-prototype-getDate\" class=\"headerlink\" title=\"Date.prototype.getDate()\"></a><em><code>Date.prototype.getDate()</code></em></h4><blockquote>\n<p>*<code>getDate()</code>*返回一个指定的日期对象为一个月中的具体哪一天</p>\n</blockquote>\n<h4 id=\"Date-prototype-getDay\"><a href=\"#Date-prototype-getDay\" class=\"headerlink\" title=\"Date.prototype.getDay()\"></a><code>Date.prototype.getDay()</code></h4><blockquote>\n<p>**<code>getDay()</code>**返回一个具体日期中一周的第几天，0 表示星期天。对于某个月中的第几天</p>\n</blockquote>\n<h4 id=\"Date-prototype-getFullYear\"><a href=\"#Date-prototype-getFullYear\" class=\"headerlink\" title=\"Date.prototype.getFullYear()\"></a><em><code>Date.prototype.getFullYear()</code></em></h4><blockquote>\n<p><strong><code>getFullYear()</code></strong> 方法根据本地时间返回指定日期的年份。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getMonth\"><a href=\"#Date-prototype-getMonth\" class=\"headerlink\" title=\"Date.prototype.getMonth()\"></a><em><code>Date.prototype.getMonth()</code></em></h4><blockquote>\n<p>返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）,所以需要月份+1</p>\n</blockquote>\n<h4 id=\"Date-prototype-getHours\"><a href=\"#Date-prototype-getHours\" class=\"headerlink\" title=\"Date.prototype.getHours()\"></a><em><code>Date.prototype.getHours()</code></em></h4><blockquote>\n<p><strong><code>getHours()</code></strong> 返回一个指定的日期对象的小时。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getMinutes\"><a href=\"#Date-prototype-getMinutes\" class=\"headerlink\" title=\"Date.prototype.getMinutes()\"></a><em><code>Date.prototype.getMinutes()</code></em></h4><blockquote>\n<p>**<code>getMinutes()</code>**返回一个指定的日期对象的分钟数。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getSeconds\"><a href=\"#Date-prototype-getSeconds\" class=\"headerlink\" title=\"Date.prototype.getSeconds()\"></a><em><code>Date.prototype.getSeconds()</code></em></h4><blockquote>\n<p><strong><code>getSeconds()</code></strong> 返回一个指定的日期对象的秒数。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getTime\"><a href=\"#Date-prototype-getTime\" class=\"headerlink\" title=\"Date.prototype.getTime()\"></a><em><code>Date.prototype.getTime()</code></em></h4><blockquote>\n<p><code>**getTime()**</code> 将时间转成时间戳</p>\n</blockquote>\n<h3 id=\"时间戳和时间格式的互转\"><a href=\"#时间戳和时间格式的互转\" class=\"headerlink\" title=\"时间戳和时间格式的互转\"></a>时间戳和时间格式的互转</h3><p>1.时间戳转成时间格式【以’-‘分割的字符串】</p>\n<ul>\n<li>只取year-Month-Day</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timestampToTime</span>(<span class=\"params\">timestamp,current</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//时间戳为10位需*1000，时间戳为13位的话不需乘1000</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(timestamp); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(timestamp * <span class=\"number\">1000</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Y = date.getFullYear() + <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> M = (date.getMonth() + <span class=\"number\">1</span> &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + (date.getMonth() + <span class=\"number\">1</span>) : date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = change(date.getDate()) + <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y + M + D;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>包括hour-minute-second</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatDateTime</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = date.getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    m = m &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + m) : m;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.getDate();</span><br><span class=\"line\">    d = d &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + d) : d;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = date.getHours();</span><br><span class=\"line\">    h = h &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + h) : h;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.getMinutes();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.getSeconds();</span><br><span class=\"line\">    minute = minute &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + minute) : minute;</span><br><span class=\"line\">    second = second &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + second) : second;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y + <span class=\"string\">&#x27;-&#x27;</span> + m + <span class=\"string\">&#x27;-&#x27;</span> + d+<span class=\"string\">&#x27; &#x27;</span>+h+<span class=\"string\">&#x27;:&#x27;</span>+minute+<span class=\"string\">&#x27;:&#x27;</span>+second;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">formatDateTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2.时间格式转成时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法<span class=\"number\">1</span>：</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">方法<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf();</span><br><span class=\"line\">方法<span class=\"number\">3</span>：</span><br><span class=\"line\"><span class=\"built_in\">Date</span>.parse(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">第三种方法只能精确到秒，前两种方法可以精确到毫秒</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"时间对象Date\"><a href=\"#时间对象Date\" class=\"headerlink\" title=\"时间对象Date()\"></a>时间对象Date()</h2><blockquote>\n<p>创建一个新的<code>Date</code>对象的唯一方法就是通过<code>new</code>操作符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let newDate = new Date();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：如果只是作为常规函数调用，而不加new操作符，返回的只是字符串，不是一个时间对象了。</p>\n</blockquote>\n<h3 id=\"Date-构造函数有四种形式：\"><a href=\"#Date-构造函数有四种形式：\" class=\"headerlink\" title=\"Date()构造函数有四种形式：\"></a><code>Date()</code>构造函数有四种形式：</h3><blockquote>\n<p>1.没有参数 <code>new Date()</code></p>\n<p>如果没有提供参数，那么新创建的时间代表当前的时间。</p>\n<p>2.Unix时间戳 <code>new Date(value)</code></p>\n<p>value是int类型的，表示自1970年1月1日00:00:00 UTC以来的毫秒数。</p>\n<p>3.时间戳字符串 <code>new Date(dateString)</code></p>\n<p>表示日期的字符串值。</p>\n</blockquote>\n<h3 id=\"Date-的方法\"><a href=\"#Date-的方法\" class=\"headerlink\" title=\"Date()的方法\"></a><code>Date()</code>的方法</h3><h4 id=\"Date-prototype-getDate\"><a href=\"#Date-prototype-getDate\" class=\"headerlink\" title=\"Date.prototype.getDate()\"></a><em><code>Date.prototype.getDate()</code></em></h4><blockquote>\n<p>*<code>getDate()</code>*返回一个指定的日期对象为一个月中的具体哪一天</p>\n</blockquote>\n<h4 id=\"Date-prototype-getDay\"><a href=\"#Date-prototype-getDay\" class=\"headerlink\" title=\"Date.prototype.getDay()\"></a><code>Date.prototype.getDay()</code></h4><blockquote>\n<p>**<code>getDay()</code>**返回一个具体日期中一周的第几天，0 表示星期天。对于某个月中的第几天</p>\n</blockquote>\n<h4 id=\"Date-prototype-getFullYear\"><a href=\"#Date-prototype-getFullYear\" class=\"headerlink\" title=\"Date.prototype.getFullYear()\"></a><em><code>Date.prototype.getFullYear()</code></em></h4><blockquote>\n<p><strong><code>getFullYear()</code></strong> 方法根据本地时间返回指定日期的年份。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getMonth\"><a href=\"#Date-prototype-getMonth\" class=\"headerlink\" title=\"Date.prototype.getMonth()\"></a><em><code>Date.prototype.getMonth()</code></em></h4><blockquote>\n<p>返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）,所以需要月份+1</p>\n</blockquote>\n<h4 id=\"Date-prototype-getHours\"><a href=\"#Date-prototype-getHours\" class=\"headerlink\" title=\"Date.prototype.getHours()\"></a><em><code>Date.prototype.getHours()</code></em></h4><blockquote>\n<p><strong><code>getHours()</code></strong> 返回一个指定的日期对象的小时。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getMinutes\"><a href=\"#Date-prototype-getMinutes\" class=\"headerlink\" title=\"Date.prototype.getMinutes()\"></a><em><code>Date.prototype.getMinutes()</code></em></h4><blockquote>\n<p>**<code>getMinutes()</code>**返回一个指定的日期对象的分钟数。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getSeconds\"><a href=\"#Date-prototype-getSeconds\" class=\"headerlink\" title=\"Date.prototype.getSeconds()\"></a><em><code>Date.prototype.getSeconds()</code></em></h4><blockquote>\n<p><strong><code>getSeconds()</code></strong> 返回一个指定的日期对象的秒数。</p>\n</blockquote>\n<h4 id=\"Date-prototype-getTime\"><a href=\"#Date-prototype-getTime\" class=\"headerlink\" title=\"Date.prototype.getTime()\"></a><em><code>Date.prototype.getTime()</code></em></h4><blockquote>\n<p><code>**getTime()**</code> 将时间转成时间戳</p>\n</blockquote>\n<h3 id=\"时间戳和时间格式的互转\"><a href=\"#时间戳和时间格式的互转\" class=\"headerlink\" title=\"时间戳和时间格式的互转\"></a>时间戳和时间格式的互转</h3><p>1.时间戳转成时间格式【以’-‘分割的字符串】</p>\n<ul>\n<li>只取year-Month-Day</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timestampToTime</span>(<span class=\"params\">timestamp,current</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//时间戳为10位需*1000，时间戳为13位的话不需乘1000</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(timestamp); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(timestamp * <span class=\"number\">1000</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Y = date.getFullYear() + <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> M = (date.getMonth() + <span class=\"number\">1</span> &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + (date.getMonth() + <span class=\"number\">1</span>) : date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = change(date.getDate()) + <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y + M + D;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>包括hour-minute-second</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatDateTime</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = date.getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    m = m &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + m) : m;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = date.getDate();</span><br><span class=\"line\">    d = d &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + d) : d;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = date.getHours();</span><br><span class=\"line\">    h = h &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + h) : h;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.getMinutes();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.getSeconds();</span><br><span class=\"line\">    minute = minute &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + minute) : minute;</span><br><span class=\"line\">    second = second &lt; <span class=\"number\">10</span> ? (<span class=\"string\">&#x27;0&#x27;</span> + second) : second;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y + <span class=\"string\">&#x27;-&#x27;</span> + m + <span class=\"string\">&#x27;-&#x27;</span> + d+<span class=\"string\">&#x27; &#x27;</span>+h+<span class=\"string\">&#x27;:&#x27;</span>+minute+<span class=\"string\">&#x27;:&#x27;</span>+second;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">formatDateTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2.时间格式转成时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法<span class=\"number\">1</span>：</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">方法<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf();</span><br><span class=\"line\">方法<span class=\"number\">3</span>：</span><br><span class=\"line\"><span class=\"built_in\">Date</span>.parse(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">第三种方法只能精确到秒，前两种方法可以精确到毫秒</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"host","title":"数组、对象、字符串常见方法","date":"2021-08-01T08:46:05.000Z","_content":"\n# 数组、对象、字符串常见方法\n\n数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。\n\n### 数组\n删除数组的某一项或某几项: `array.splice(i,1)`\n> 场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串\n```\n//第一种：数组包对象\nlet arr = [{id:1,name:'amy'},{},{},{},{}];\n//第二种：数组包空字符串\nlet newArr = ['amy','','','',''];\n//封装无论是空对象还是空字符串\nfunction DelEmptyObj(temp){\n  temp.forEach((item,index)=>{\n    //知识点 下面对象中有讲解 判断是否是空对象obj\n    if(JSON.stringify(item) == '{}' || item == ''){\n      item.splice(index,1);\n    }\n  })\n  retuen temp;\n}\n//调用函数\nDelEmptyObj(arr); // [{id:1,name:'amy'}]\nDelEmptyObj(newArr); // ['amy']\n```\n\n### 对象\n\n**判断是否是空对象**\n\n> + 判断json字符串是不是'{}'\n>\n> ```\n> let obj = {};\n> function verify(obj){\n> if(JSON.stringify(obj) == '{}'){\n> return true;\n> }\n> }\n> verify(obj);\n> ```\n>\n> + es6新增方法 Object.keys(obj).length 或者 \n>\n>   ```\n>   Object.value(obj).length\n>   let obj = {};\n>   function change1(arg1){\n>   console.log(Object.keys(arg1)); // []\n>   if(Object.keys(arg1).length != 0){\n>      return true;\n>   }\n>   }\n>   function change2(arg2){\n>   console.log(Object.values(arg2)); // []\n>   if(Object.values(arg2).length != 0){\n>      return true;\n>   }\n>   }\n>   change1(obj1);\n>   change2(obj2);\n>       \n>   ```\n**2.判断对象中是否存在某属性**\n\n```\n方法一：通过把对象通过keys()转化为数组.indexOf(str)\nlet obj = {name:'amy',age:18};\nconsole.log(Object.keys(obj).indexOf('amy'));  //true\n\n```\n\n```\n方法二：in \nconsole.log('amy' in obj)  //true\n```\n\n```\n方法三:hasOwnProperty\nconsole.log(obj.hasOwnProperty('amy'))  //true\n```\n\n\n\n## 字符串","source":"_posts/数组、对象、字符串常见方法.md","raw":"---\nlayout: host\ntitle: 数组、对象、字符串常见方法\ndate: 2021-08-01 16:46:05\ncategories: \n- Javascript\ntags:\n- js\n- 数组\n---\n\n# 数组、对象、字符串常见方法\n\n数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。\n\n### 数组\n删除数组的某一项或某几项: `array.splice(i,1)`\n> 场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串\n```\n//第一种：数组包对象\nlet arr = [{id:1,name:'amy'},{},{},{},{}];\n//第二种：数组包空字符串\nlet newArr = ['amy','','','',''];\n//封装无论是空对象还是空字符串\nfunction DelEmptyObj(temp){\n  temp.forEach((item,index)=>{\n    //知识点 下面对象中有讲解 判断是否是空对象obj\n    if(JSON.stringify(item) == '{}' || item == ''){\n      item.splice(index,1);\n    }\n  })\n  retuen temp;\n}\n//调用函数\nDelEmptyObj(arr); // [{id:1,name:'amy'}]\nDelEmptyObj(newArr); // ['amy']\n```\n\n### 对象\n\n**判断是否是空对象**\n\n> + 判断json字符串是不是'{}'\n>\n> ```\n> let obj = {};\n> function verify(obj){\n> if(JSON.stringify(obj) == '{}'){\n> return true;\n> }\n> }\n> verify(obj);\n> ```\n>\n> + es6新增方法 Object.keys(obj).length 或者 \n>\n>   ```\n>   Object.value(obj).length\n>   let obj = {};\n>   function change1(arg1){\n>   console.log(Object.keys(arg1)); // []\n>   if(Object.keys(arg1).length != 0){\n>      return true;\n>   }\n>   }\n>   function change2(arg2){\n>   console.log(Object.values(arg2)); // []\n>   if(Object.values(arg2).length != 0){\n>      return true;\n>   }\n>   }\n>   change1(obj1);\n>   change2(obj2);\n>       \n>   ```\n**2.判断对象中是否存在某属性**\n\n```\n方法一：通过把对象通过keys()转化为数组.indexOf(str)\nlet obj = {name:'amy',age:18};\nconsole.log(Object.keys(obj).indexOf('amy'));  //true\n\n```\n\n```\n方法二：in \nconsole.log('amy' in obj)  //true\n```\n\n```\n方法三:hasOwnProperty\nconsole.log(obj.hasOwnProperty('amy'))  //true\n```\n\n\n\n## 字符串","slug":"数组、对象、字符串常见方法","published":1,"updated":"2021-09-14T10:14:54.497Z","comments":1,"photos":[],"link":"","_id":"ckx76wycg000f64ddgv01c926","content":"<h1 id=\"数组、对象、字符串常见方法\"><a href=\"#数组、对象、字符串常见方法\" class=\"headerlink\" title=\"数组、对象、字符串常见方法\"></a>数组、对象、字符串常见方法</h1><p>数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>删除数组的某一项或某几项: <code>array.splice(i,1)</code></p>\n<blockquote>\n<p>场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一种：数组包对象</span><br><span class=\"line\">let arr = [&#123;id:1,name:&#x27;amy&#x27;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;];</span><br><span class=\"line\">//第二种：数组包空字符串</span><br><span class=\"line\">let newArr = [&#x27;amy&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;];</span><br><span class=\"line\">//封装无论是空对象还是空字符串</span><br><span class=\"line\">function DelEmptyObj(temp)&#123;</span><br><span class=\"line\">  temp.forEach((item,index)=&gt;&#123;</span><br><span class=\"line\">    //知识点 下面对象中有讲解 判断是否是空对象obj</span><br><span class=\"line\">    if(JSON.stringify(item) == &#x27;&#123;&#125;&#x27; || item == &#x27;&#x27;)&#123;</span><br><span class=\"line\">      item.splice(index,1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  retuen temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//调用函数</span><br><span class=\"line\">DelEmptyObj(arr); // [&#123;id:1,name:&#x27;amy&#x27;&#125;]</span><br><span class=\"line\">DelEmptyObj(newArr); // [&#x27;amy&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p><strong>判断是否是空对象</strong></p>\n<blockquote>\n<ul>\n<li>判断json字符串是不是’{}’</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">function verify(obj)&#123;</span><br><span class=\"line\">if(JSON.stringify(obj) == &#x27;&#123;&#125;&#x27;)&#123;</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">verify(obj);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>es6新增方法 Object.keys(obj).length 或者 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.value(obj).length</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">function change1(arg1)&#123;</span><br><span class=\"line\">console.log(Object.keys(arg1)); // []</span><br><span class=\"line\">if(Object.keys(arg1).length != 0)&#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function change2(arg2)&#123;</span><br><span class=\"line\">console.log(Object.values(arg2)); // []</span><br><span class=\"line\">if(Object.values(arg2).length != 0)&#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">change1(obj1);</span><br><span class=\"line\">change2(obj2);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2.判断对象中是否存在某属性</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：通过把对象通过keys()转化为数组.indexOf(str)</span><br><span class=\"line\">let obj = &#123;name:&#x27;amy&#x27;,age:18&#125;;</span><br><span class=\"line\">console.log(Object.keys(obj).indexOf(&#x27;amy&#x27;));  //true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法二：in </span><br><span class=\"line\">console.log(&#x27;amy&#x27; in obj)  //true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法三:hasOwnProperty</span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;amy&#x27;))  //true</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数组、对象、字符串常见方法\"><a href=\"#数组、对象、字符串常见方法\" class=\"headerlink\" title=\"数组、对象、字符串常见方法\"></a>数组、对象、字符串常见方法</h1><p>数组，对象，字符串在实现业务逻辑时常常遇到增加，替换 ，删除，截取的要求，为了方便工作中提高工作效率和防止忘记，写了数组，对象，字符串中常用的方法和针对性应用场景。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>删除数组的某一项或某几项: <code>array.splice(i,1)</code></p>\n<blockquote>\n<p>场景：返回的数据中如果返回的是空对象或者空字符串 删除该对象或者删除该字符串</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一种：数组包对象</span><br><span class=\"line\">let arr = [&#123;id:1,name:&#x27;amy&#x27;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;];</span><br><span class=\"line\">//第二种：数组包空字符串</span><br><span class=\"line\">let newArr = [&#x27;amy&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;];</span><br><span class=\"line\">//封装无论是空对象还是空字符串</span><br><span class=\"line\">function DelEmptyObj(temp)&#123;</span><br><span class=\"line\">  temp.forEach((item,index)=&gt;&#123;</span><br><span class=\"line\">    //知识点 下面对象中有讲解 判断是否是空对象obj</span><br><span class=\"line\">    if(JSON.stringify(item) == &#x27;&#123;&#125;&#x27; || item == &#x27;&#x27;)&#123;</span><br><span class=\"line\">      item.splice(index,1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  retuen temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//调用函数</span><br><span class=\"line\">DelEmptyObj(arr); // [&#123;id:1,name:&#x27;amy&#x27;&#125;]</span><br><span class=\"line\">DelEmptyObj(newArr); // [&#x27;amy&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p><strong>判断是否是空对象</strong></p>\n<blockquote>\n<ul>\n<li>判断json字符串是不是’{}’</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">function verify(obj)&#123;</span><br><span class=\"line\">if(JSON.stringify(obj) == &#x27;&#123;&#125;&#x27;)&#123;</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">verify(obj);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>es6新增方法 Object.keys(obj).length 或者 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.value(obj).length</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">function change1(arg1)&#123;</span><br><span class=\"line\">console.log(Object.keys(arg1)); // []</span><br><span class=\"line\">if(Object.keys(arg1).length != 0)&#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function change2(arg2)&#123;</span><br><span class=\"line\">console.log(Object.values(arg2)); // []</span><br><span class=\"line\">if(Object.values(arg2).length != 0)&#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">change1(obj1);</span><br><span class=\"line\">change2(obj2);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2.判断对象中是否存在某属性</strong></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：通过把对象通过keys()转化为数组.indexOf(str)</span><br><span class=\"line\">let obj = &#123;name:&#x27;amy&#x27;,age:18&#125;;</span><br><span class=\"line\">console.log(Object.keys(obj).indexOf(&#x27;amy&#x27;));  //true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法二：in </span><br><span class=\"line\">console.log(&#x27;amy&#x27; in obj)  //true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法三:hasOwnProperty</span><br><span class=\"line\">console.log(obj.hasOwnProperty(&#x27;amy&#x27;))  //true</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckx76wyc0000164ddafbw5jnu","category_id":"ckx76wyc5000464ddejeq0kfx","_id":"ckx76wych000g64ddafsia2vy"},{"post_id":"ckx76wycf000e64ddhl7j1r8u","category_id":"ckx76wyc5000464ddejeq0kfx","_id":"ckx76wycj000j64dd0fzo9qy4"},{"post_id":"ckx76wyc3000364dd77s97qa8","category_id":"ckx76wyce000c64dd8hfgabuz","_id":"ckx76wyck000m64ddgtp10e1t"},{"post_id":"ckx76wycg000f64ddgv01c926","category_id":"ckx76wyc5000464ddejeq0kfx","_id":"ckx76wyck000o64dd9p4r102w"},{"post_id":"ckx76wyc9000764ddddej2kr6","category_id":"ckx76wyci000h64dd833v4hm5","_id":"ckx76wyck000r64dd7jx089kn"},{"post_id":"ckx76wycb000964dd7mwd3a6z","category_id":"ckx76wycj000k64ddenac4rtq","_id":"ckx76wycl000t64dd9hal5top"}],"PostTag":[{"post_id":"ckx76wyc0000164ddafbw5jnu","tag_id":"ckx76wyc8000564ddg8lk77w7","_id":"ckx76wyck000n64dd3kk51ldp"},{"post_id":"ckx76wyc0000164ddafbw5jnu","tag_id":"ckx76wyce000d64dd4ub6cst4","_id":"ckx76wyck000p64dd7ob99nu7"},{"post_id":"ckx76wyc0000164ddafbw5jnu","tag_id":"ckx76wyci000i64dd43d24rbd","_id":"ckx76wyck000s64dd6pt97nfw"},{"post_id":"ckx76wyc3000364dd77s97qa8","tag_id":"ckx76wycj000l64ddebqq4jgp","_id":"ckx76wycl000v64ddg41lgq8d"},{"post_id":"ckx76wyc3000364dd77s97qa8","tag_id":"ckx76wyck000q64dd19vj2ow1","_id":"ckx76wycl000w64dd7s1pfmmd"},{"post_id":"ckx76wyc9000764ddddej2kr6","tag_id":"ckx76wycl000u64dd47g36rpe","_id":"ckx76wycm000y64ddemce8sdo"},{"post_id":"ckx76wycb000964dd7mwd3a6z","tag_id":"ckx76wycl000x64ddcimogyk6","_id":"ckx76wycn001064dd3mbn1w89"},{"post_id":"ckx76wycf000e64ddhl7j1r8u","tag_id":"ckx76wycm000z64ddafmkbvv1","_id":"ckx76wycn001364dd596q6gu2"},{"post_id":"ckx76wycf000e64ddhl7j1r8u","tag_id":"ckx76wyc8000564ddg8lk77w7","_id":"ckx76wyco001464dd63g37xqf"},{"post_id":"ckx76wycf000e64ddhl7j1r8u","tag_id":"ckx76wycn001164ddhy9695je","_id":"ckx76wyco001564dd7u2w3a9t"},{"post_id":"ckx76wycg000f64ddgv01c926","tag_id":"ckx76wyc8000564ddg8lk77w7","_id":"ckx76wyco001664dd78tsc219"},{"post_id":"ckx76wycg000f64ddgv01c926","tag_id":"ckx76wycn001264dd494ce3hn","_id":"ckx76wyco001764dde7bx8ku9"}],"Tag":[{"name":"js","_id":"ckx76wyc8000564ddg8lk77w7"},{"name":"ES6","_id":"ckx76wyce000d64dd4ub6cst4"},{"name":"iterator","_id":"ckx76wyci000i64dd43d24rbd"},{"name":"Javascript","_id":"ckx76wycj000l64ddebqq4jgp"},{"name":"Typescript","_id":"ckx76wyck000q64dd19vj2ow1"},{"name":"css","_id":"ckx76wycl000u64dd47g36rpe"},{"name":"svg","_id":"ckx76wycl000x64ddcimogyk6"},{"name":"对象","_id":"ckx76wycm000z64ddafmkbvv1"},{"name":"字符串","_id":"ckx76wycn001164ddhy9695je"},{"name":"数组","_id":"ckx76wycn001264dd494ce3hn"}]}}